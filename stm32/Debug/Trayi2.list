
Trayi2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004d00  08004d00  00014d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f08  08004f08  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004f08  08004f08  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f08  08004f08  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000010  08004f20  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08004f20  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b548  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b09  00000000  00000000  0002b581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017551  00000000  00000000  0002e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfbc  00000000  00000000  00045d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ff7  00000000  00000000  00051d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbd3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c4  00000000  00000000  000dbd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ce4 	.word	0x08004ce4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004ce4 	.word	0x08004ce4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <HAL_TIM_PWM_PulseFinishedCallback>:
	uint8_t red;
	uint8_t green;
	uint8_t blue;
} Color;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000d54:	f002 f884 	bl	8002e60 <HAL_TIM_PWM_Stop_DMA>
	LED_sending = 0;
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000ac 	.word	0x200000ac
 8000d6c:	20000138 	.word	0x20000138

08000d70 <LED_set>:
//	LED_Data[LED_number][1] = green;
//	LED_Data[LED_number][2] = red;
//	LED_Data[LED_number][3] = blue;
//}

void LED_set(uint32_t LED_number, Color *color) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	LED_Data[LED_number][0] = LED_number;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	b2d9      	uxtb	r1, r3
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <LED_set+0x50>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LED_number][1] = color->green;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	7859      	ldrb	r1, [r3, #1]
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <LED_set+0x50>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	460a      	mov	r2, r1
 8000d94:	705a      	strb	r2, [r3, #1]
	LED_Data[LED_number][2] = color->red;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	7819      	ldrb	r1, [r3, #0]
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <LED_set+0x50>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	460a      	mov	r2, r1
 8000da4:	709a      	strb	r2, [r3, #2]
	LED_Data[LED_number][3] = color->blue;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	7899      	ldrb	r1, [r3, #2]
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <LED_set+0x50>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	460a      	mov	r2, r1
 8000db4:	70da      	strb	r2, [r3, #3]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	2000002c 	.word	0x2000002c
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <LED_set_brightness>:

void LED_set_brightness(uint32_t LED_number, uint8_t brightness) {
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
#if USE_BRIGHTNESS

	if (brightness > 45) {
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	2b2d      	cmp	r3, #45	; 0x2d
 8000dd8:	d901      	bls.n	8000dde <LED_set_brightness+0x16>
		brightness = 45;
 8000dda:	232d      	movs	r3, #45	; 0x2d
 8000ddc:	70fb      	strb	r3, [r7, #3]
	}

	if (LED_number < 0 || LED_number >= MAX_LED) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d85d      	bhi.n	8000ea0 <LED_set_brightness+0xd8>
		return;
	}

	LED_Mod[LED_number][0] = LED_Data[LED_number][0];
 8000de4:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <LED_set_brightness+0xe8>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000dec:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <LED_set_brightness+0xec>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int j = 1; j < 4; j++) {
 8000df4:	2301      	movs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e04e      	b.n	8000e98 <LED_set_brightness+0xd0>
		float angle = 90 - brightness;
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff4d 	bl	8000ca0 <__aeabi_i2f>
 8000e06:	4603      	mov	r3, r0
 8000e08:	60bb      	str	r3, [r7, #8]
		angle = angle * M_PI / 180;
 8000e0a:	68b8      	ldr	r0, [r7, #8]
 8000e0c:	f7ff fb04 	bl	8000418 <__aeabi_f2d>
 8000e10:	a325      	add	r3, pc, #148	; (adr r3, 8000ea8 <LED_set_brightness+0xe0>)
 8000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e16:	f7ff fb57 	bl	80004c8 <__aeabi_dmul>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <LED_set_brightness+0xf0>)
 8000e28:	f7ff fc78 	bl	800071c <__aeabi_ddiv>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f7ff fe2a 	bl	8000a8c <__aeabi_d2f>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60bb      	str	r3, [r7, #8]
		LED_Mod[LED_number][j] = (LED_Data[LED_number][j]) / (tan(angle));
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <LED_set_brightness+0xe8>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	441a      	add	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fad2 	bl	80003f4 <__aeabi_i2d>
 8000e50:	4604      	mov	r4, r0
 8000e52:	460d      	mov	r5, r1
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f7ff fadf 	bl	8000418 <__aeabi_f2d>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f002 ff0f 	bl	8003c84 <tan>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	f7ff fc55 	bl	800071c <__aeabi_ddiv>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f7ff fde7 	bl	8000a4c <__aeabi_d2uiz>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b2d9      	uxtb	r1, r3
 8000e82:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <LED_set_brightness+0xec>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	441a      	add	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	460a      	mov	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
	for (int j = 1; j < 4; j++) {
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	ddad      	ble.n	8000dfa <LED_set_brightness+0x32>
 8000e9e:	e000      	b.n	8000ea2 <LED_set_brightness+0xda>
		return;
 8000ea0:	bf00      	nop
	}

#endif

}
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea8:	54442d18 	.word	0x54442d18
 8000eac:	400921fb 	.word	0x400921fb
 8000eb0:	2000002c 	.word	0x2000002c
 8000eb4:	2000006c 	.word	0x2000006c
 8000eb8:	40668000 	.word	0x40668000
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <LED_send>:

void LED_send(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
	while (LED_sending)
 8000ec6:	bf00      	nop
 8000ec8:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <LED_send+0x110>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1fb      	bne.n	8000ec8 <LED_send+0x8>
		;

	LED_sending = 1;
 8000ed0:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <LED_send+0x110>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
	memset(LED_PWM_Data, 0, 24 * MAX_LED + 40);
 8000ed6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8000eda:	2100      	movs	r1, #0
 8000edc:	483d      	ldr	r0, [pc, #244]	; (8000fd4 <LED_send+0x114>)
 8000ede:	f002 fec9 	bl	8003c74 <memset>

	uint32_t idx = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < MAX_LED; ++i) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	e05a      	b.n	8000fa2 <LED_send+0xe2>
#if USE_BRIGHTNESS
		uint32_t color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8)
 8000eec:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <LED_send+0x118>)
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	041a      	lsls	r2, r3, #16
 8000ef8:	4937      	ldr	r1, [pc, #220]	; (8000fd8 <LED_send+0x118>)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	789b      	ldrb	r3, [r3, #2]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	431a      	orrs	r2, r3
				| (LED_Mod[i][3]));
 8000f06:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <LED_send+0x118>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	78db      	ldrb	r3, [r3, #3]
 8000f10:	4313      	orrs	r3, r2
		uint32_t color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8)
 8000f12:	603b      	str	r3, [r7, #0]
#else
		uint32_t color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8)
						| (LED_Data[i][3]));
#endif
		for (int j = 23; j >= 0; --j) {
 8000f14:	2317      	movs	r3, #23
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	e03d      	b.n	8000f96 <LED_send+0xd6>
			if (color & (1 << j)) {
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d017      	beq.n	8000f5c <LED_send+0x9c>
				LED_PWM_Data[idx] = 0.66 * TIM3->ARR;
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <LED_send+0x11c>)
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fa4f 	bl	80003d4 <__aeabi_ui2d>
 8000f36:	a322      	add	r3, pc, #136	; (adr r3, 8000fc0 <LED_send+0x100>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fac4 	bl	80004c8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fd80 	bl	8000a4c <__aeabi_d2uiz>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b2d9      	uxtb	r1, r3
 8000f50:	4a20      	ldr	r2, [pc, #128]	; (8000fd4 <LED_send+0x114>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e016      	b.n	8000f8a <LED_send+0xca>
			} else {
				LED_PWM_Data[idx] = 0.33 * TIM3->ARR;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <LED_send+0x11c>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa37 	bl	80003d4 <__aeabi_ui2d>
 8000f66:	a318      	add	r3, pc, #96	; (adr r3, 8000fc8 <LED_send+0x108>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff faac 	bl	80004c8 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fd68 	bl	8000a4c <__aeabi_d2uiz>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b2d9      	uxtb	r1, r3
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <LED_send+0x114>)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	460a      	mov	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
				;
			}
			idx++;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
		for (int j = 23; j >= 0; --j) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dabe      	bge.n	8000f1a <LED_send+0x5a>
	for (int i = 0; i < MAX_LED; ++i) {
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	dda1      	ble.n	8000eec <LED_send+0x2c>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) LED_PWM_Data,
 8000fa8:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <LED_send+0x114>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LED_send+0x120>)
 8000fb2:	f001 fdbb 	bl	8002b2c <HAL_TIM_PWM_Start_DMA>
			24 * MAX_LED + 40);
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	51eb851f 	.word	0x51eb851f
 8000fc4:	3fe51eb8 	.word	0x3fe51eb8
 8000fc8:	51eb851f 	.word	0x51eb851f
 8000fcc:	3fd51eb8 	.word	0x3fd51eb8
 8000fd0:	20000138 	.word	0x20000138
 8000fd4:	20000180 	.word	0x20000180
 8000fd8:	2000006c 	.word	0x2000006c
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	200000ac 	.word	0x200000ac

08000fe4 <static_mode>:

/*
 * Static mode
 */
void static_mode(Color *color) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < MAX_LED; ++i) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e006      	b.n	8001000 <static_mode+0x1c>
		LED_set(i, color);
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff febb 	bl	8000d70 <LED_set>
	for (uint32_t i = 0; i < MAX_LED; ++i) {
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	d9f5      	bls.n	8000ff2 <static_mode+0xe>
	}
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <dragon_breath_mode>:
/*
 * Dragon breath mode
 */
uint8_t pos = 0, incr = 1;

void dragon_breath_mode(Color *color) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8001018:	2032      	movs	r0, #50	; 0x32
 800101a:	f000 fbc9 	bl	80017b0 <HAL_Delay>

	for (uint32_t i = 0; i < MAX_LED; ++i) {
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	e006      	b.n	8001032 <dragon_breath_mode+0x22>
		LED_set(i, color);
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f7ff fea2 	bl	8000d70 <LED_set>
	for (uint32_t i = 0; i < MAX_LED; ++i) {
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d9f5      	bls.n	8001024 <dragon_breath_mode+0x14>
	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <rainbow_mode>:

/*
 * Rainbow mode
 */
void rainbow_mode() {
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
	...

08001050 <set_mode>:

void set_mode(uint8_t mode, Color *color) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d034      	beq.n	80010cc <set_mode+0x7c>
 8001062:	2b02      	cmp	r3, #2
 8001064:	dc35      	bgt.n	80010d2 <set_mode+0x82>
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <set_mode+0x20>
 800106a:	2b01      	cmp	r3, #1
 800106c:	d004      	beq.n	8001078 <set_mode+0x28>
		break;
	case RAINBOW:
		rainbow_mode();
		break;
	}
}
 800106e:	e030      	b.n	80010d2 <set_mode+0x82>
		static_mode(color);
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff ffb7 	bl	8000fe4 <static_mode>
		break;
 8001076:	e02c      	b.n	80010d2 <set_mode+0x82>
		dragon_breath_mode(color);
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff ffc9 	bl	8001010 <dragon_breath_mode>
		if (color->red == MAX_COLOR || color->blue == MAX_COLOR) {
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2bff      	cmp	r3, #255	; 0xff
 8001084:	d003      	beq.n	800108e <set_mode+0x3e>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	d102      	bne.n	8001094 <set_mode+0x44>
			incr = -1;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <set_mode+0x8c>)
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	701a      	strb	r2, [r3, #0]
		if (color->red == MIN_COLOR || color->blue == MIN_COLOR) {
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b0a      	cmp	r3, #10
 800109a:	d003      	beq.n	80010a4 <set_mode+0x54>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	789b      	ldrb	r3, [r3, #2]
 80010a0:	2b0a      	cmp	r3, #10
 80010a2:	d102      	bne.n	80010aa <set_mode+0x5a>
			incr = 1;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <set_mode+0x8c>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
		color->blue += incr;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	789a      	ldrb	r2, [r3, #2]
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <set_mode+0x8c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	709a      	strb	r2, [r3, #2]
		color->red += incr;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <set_mode+0x8c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	701a      	strb	r2, [r3, #0]
		break;
 80010ca:	e002      	b.n	80010d2 <set_mode+0x82>
		rainbow_mode();
 80010cc:	f7ff ffb9 	bl	8001042 <rainbow_mode>
		break;
 80010d0:	bf00      	nop
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000000 	.word	0x20000000

080010e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010e6:	f000 fb01 	bl	80016ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010ea:	f000 f83d 	bl	8001168 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010ee:	f000 f921 	bl	8001334 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80010f2:	f000 f8d7 	bl	80012a4 <MX_USART2_UART_Init>
	MX_DMA_Init();
 80010f6:	f000 f8ff 	bl	80012f8 <MX_DMA_Init>
	MX_TIM3_Init();
 80010fa:	f000 f87b 	bl	80011f4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	Color c = { 255, 10, 255 };
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <main+0x84>)
 8001100:	463b      	mov	r3, r7
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	4611      	mov	r1, r2
 8001106:	8019      	strh	r1, [r3, #0]
 8001108:	3302      	adds	r3, #2
 800110a:	0c12      	lsrs	r2, r2, #16
 800110c:	701a      	strb	r2, [r3, #0]
	Color *c_p = &c;
 800110e:	463b      	mov	r3, r7
 8001110:	607b      	str	r3, [r7, #4]
//		LED_set(12, 102, 205, 170);
//		LED_set(13, 255, 165, 255);
//		LED_set(14, 255, 165, 0);
//		LED_set(15, 210, 105, 30);

		set_mode(STATIC, c_p);
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff9b 	bl	8001050 <set_mode>
		for (int i = 0; i < 46; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e00a      	b.n	8001136 <main+0x56>
			LED_set_brightness(0, i);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fe4e 	bl	8000dc8 <LED_set_brightness>
			LED_send();
 800112c:	f7ff fec8 	bl	8000ec0 <LED_send>
		for (int i = 0; i < 46; i++) {
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b2d      	cmp	r3, #45	; 0x2d
 800113a:	ddf1      	ble.n	8001120 <main+0x40>
//			WS2812_Send();
//			HAL_Delay(50);
		}

		for (int i = 45; i >= 0; i--) {
 800113c:	232d      	movs	r3, #45	; 0x2d
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	e00a      	b.n	8001158 <main+0x78>
			LED_set_brightness(0, i);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fe3d 	bl	8000dc8 <LED_set_brightness>
			LED_send();
 800114e:	f7ff feb7 	bl	8000ec0 <LED_send>
		for (int i = 45; i >= 0; i--) {
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3b01      	subs	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	daf1      	bge.n	8001142 <main+0x62>
//			WS2812_Send();
//			HAL_Delay(50);
		}
		LED_send();
 800115e:	f7ff feaf 	bl	8000ec0 <LED_send>
		set_mode(STATIC, c_p);
 8001162:	e7d6      	b.n	8001112 <main+0x32>
 8001164:	08004d00 	.word	0x08004d00

08001168 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	; 0x40
 800116c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	2228      	movs	r2, #40	; 0x28
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fd7c 	bl	8003c74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800118e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001192:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 f851 	bl	8002258 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x58>
		Error_Handler();
 80011bc:	f000 f928 	bl	8001410 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fabc 	bl	8002758 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x82>
		Error_Handler();
 80011e6:	f000 f913 	bl	8001410 <Error_Handler>
	}
}
 80011ea:	bf00      	nop
 80011ec:	3740      	adds	r7, #64	; 0x40
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_TIM3_Init+0xa8>)
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <MX_TIM3_Init+0xac>)
 800121a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_TIM3_Init+0xa8>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_TIM3_Init+0xa8>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90 - 1;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_TIM3_Init+0xa8>)
 800122a:	2259      	movs	r2, #89	; 0x59
 800122c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_TIM3_Init+0xa8>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_TIM3_Init+0xa8>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800123a:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_TIM3_Init+0xa8>)
 800123c:	f001 fc26 	bl	8002a8c <HAL_TIM_PWM_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0x56>
		Error_Handler();
 8001246:	f000 f8e3 	bl	8001410 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	4619      	mov	r1, r3
 8001258:	4810      	ldr	r0, [pc, #64]	; (800129c <MX_TIM3_Init+0xa8>)
 800125a:	f002 fb9b 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM3_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8001264:	f000 f8d4 	bl	8001410 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001268:	2360      	movs	r3, #96	; 0x60
 800126a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM3_Init+0xa8>)
 8001280:	f001 ffb4 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800128a:	f000 f8c1 	bl	8001410 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM3_Init+0xa8>)
 8001290:	f000 f94c 	bl	800152c <HAL_TIM_MspPostInit>

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000ac 	.word	0x200000ac
 80012a0:	40000400 	.word	0x40000400

080012a4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_USART2_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012dc:	f002 fbca 	bl	8003a74 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80012e6:	f000 f893 	bl	8001410 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000013c 	.word	0x2000013c
 80012f4:	40004400 	.word	0x40004400

080012f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_DMA_Init+0x38>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <MX_DMA_Init+0x38>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_DMA_Init+0x38>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2010      	movs	r0, #16
 800131c:	f000 fb43 	bl	80019a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001320:	2010      	movs	r0, #16
 8001322:	f000 fb5c 	bl	80019de <HAL_NVIC_EnableIRQ>

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <MX_GPIO_Init+0xcc>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a2c      	ldr	r2, [pc, #176]	; (8001400 <MX_GPIO_Init+0xcc>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <MX_GPIO_Init+0xcc>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <MX_GPIO_Init+0xcc>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <MX_GPIO_Init+0xcc>)
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <MX_GPIO_Init+0xcc>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <MX_GPIO_Init+0xcc>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a20      	ldr	r2, [pc, #128]	; (8001400 <MX_GPIO_Init+0xcc>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_GPIO_Init+0xcc>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_GPIO_Init+0xcc>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <MX_GPIO_Init+0xcc>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_GPIO_Init+0xcc>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2120      	movs	r1, #32
 80013ac:	4815      	ldr	r0, [pc, #84]	; (8001404 <MX_GPIO_Init+0xd0>)
 80013ae:	f000 ff19 	bl	80021e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_GPIO_Init+0xd4>)
 80013ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_GPIO_Init+0xd8>)
 80013c8:	f000 fd88 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80013cc:	2320      	movs	r3, #32
 80013ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <MX_GPIO_Init+0xd0>)
 80013e4:	f000 fd7a 	bl	8001edc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2028      	movs	r0, #40	; 0x28
 80013ee:	f000 fada 	bl	80019a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f2:	2028      	movs	r0, #40	; 0x28
 80013f4:	f000 faf3 	bl	80019de <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	40010800 	.word	0x40010800
 8001408:	10110000 	.word	0x10110000
 800140c:	40011000 	.word	0x40011000

08001410 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001418:	e7fe      	b.n	8001418 <Error_Handler+0x8>
	...

0800141c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_MspInit+0x5c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_MspInit+0x5c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x5c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_MspInit+0x5c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_MspInit+0x60>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_MspInit+0x60>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000

08001480 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a23      	ldr	r2, [pc, #140]	; (800151c <HAL_TIM_PWM_MspInit+0x9c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d140      	bne.n	8001514 <HAL_TIM_PWM_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_TIM_PWM_MspInit+0xa0>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_TIM_PWM_MspInit+0xa0>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_TIM_PWM_MspInit+0xa0>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014ac:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <HAL_TIM_PWM_MspInit+0xa8>)
 80014ae:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80014dc:	4811      	ldr	r0, [pc, #68]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014de:	f000 fa99 	bl	8001a14 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_TIM_PWM_MspInit+0x6c>
    {
      Error_Handler();
 80014e8:	f7ff ff92 	bl	8001410 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_TIM_PWM_MspInit+0xa4>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	201d      	movs	r0, #29
 800150a:	f000 fa4c 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800150e:	201d      	movs	r0, #29
 8001510:	f000 fa65 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40000400 	.word	0x40000400
 8001520:	40021000 	.word	0x40021000
 8001524:	200000f4 	.word	0x200000f4
 8001528:	4002006c 	.word	0x4002006c

0800152c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_TIM_MspPostInit+0x58>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d117      	bne.n	800157c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_TIM_MspPostInit+0x5c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_TIM_MspPostInit+0x5c>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_TIM_MspPostInit+0x5c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001564:	2340      	movs	r3, #64	; 0x40
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4619      	mov	r1, r3
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_TIM_MspPostInit+0x60>)
 8001578:	f000 fcb0 	bl	8001edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40000400 	.word	0x40000400
 8001588:	40021000 	.word	0x40021000
 800158c:	40010800 	.word	0x40010800

08001590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <HAL_UART_MspInit+0x70>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d123      	bne.n	80015f8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_UART_MspInit+0x74>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <HAL_UART_MspInit+0x74>)
 80015b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ba:	61d3      	str	r3, [r2, #28]
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_UART_MspInit+0x74>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_UART_MspInit+0x74>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_UART_MspInit+0x74>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_UART_MspInit+0x74>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015e0:	230c      	movs	r3, #12
 80015e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <HAL_UART_MspInit+0x78>)
 80015f4:	f000 fc72 	bl	8001edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40004400 	.word	0x40004400
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <NMI_Handler+0x4>

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001652:	f000 f891 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <DMA1_Channel6_IRQHandler+0x10>)
 8001662:	f000 fb07 	bl	8001c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200000f4 	.word	0x200000f4

08001670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <TIM3_IRQHandler+0x10>)
 8001676:	f001 fcb1 	bl	8002fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000ac 	.word	0x200000ac

08001684 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001688:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800168c:	f000 fdc2 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016a2:	490d      	ldr	r1, [pc, #52]	; (80016d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b8:	4c0a      	ldr	r4, [pc, #40]	; (80016e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016c6:	f7ff ffe5 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f002 faaf 	bl	8003c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ce:	f7ff fd07 	bl	80010e0 <main>
  bx lr
 80016d2:	4770      	bx	lr
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016dc:	08004f10 	.word	0x08004f10
  ldr r2, =_sbss
 80016e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016e4:	2000032c 	.word	0x2000032c

080016e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC1_2_IRQHandler>
	...

080016ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_Init+0x28>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_Init+0x28>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f947 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	2000      	movs	r0, #0
 8001704:	f000 f808 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fe88 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40022000 	.word	0x40022000

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f95f 	bl	80019fa <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f927 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000004 	.word	0x20000004
 8001770:	2000000c 	.word	0x2000000c
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_IncTick+0x1c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_IncTick+0x20>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_IncTick+0x20>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	2000000c 	.word	0x2000000c
 8001798:	20000328 	.word	0x20000328

0800179c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <HAL_GetTick+0x10>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	20000328 	.word	0x20000328

080017b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff fff0 	bl	800179c <HAL_GetTick>
 80017bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c8:	d005      	beq.n	80017d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_Delay+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d6:	bf00      	nop
 80017d8:	f7ff ffe0 	bl	800179c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f7      	bhi.n	80017d8 <HAL_Delay+0x28>
  {
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000000c 	.word	0x2000000c

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4906      	ldr	r1, [pc, #24]	; (8001890 <__NVIC_EnableIRQ+0x34>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff90 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff2d 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff42 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff90 	bl	80018e8 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5f 	bl	8001894 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff35 	bl	800185c <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e043      	b.n	8001ab2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_DMA_Init+0xa8>)
 8001a32:	4413      	add	r3, r2
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <HAL_DMA_Init+0xac>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	009a      	lsls	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_DMA_Init+0xb0>)
 8001a46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	bffdfff8 	.word	0xbffdfff8
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Start_IT+0x20>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e04a      	b.n	8001b7e <HAL_DMA_Start_IT+0xb6>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d13a      	bne.n	8001b70 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f9ae 	bl	8001e80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 020e 	orr.w	r2, r2, #14
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e00f      	b.n	8001b5e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0204 	bic.w	r2, r2, #4
 8001b4c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 020a 	orr.w	r2, r2, #10
 8001b5c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e005      	b.n	8001b7c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d005      	beq.n	8001baa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e051      	b.n	8001c4e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 020e 	bic.w	r2, r2, #14
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_DMA_Abort_IT+0xd0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d029      	beq.n	8001c28 <HAL_DMA_Abort_IT+0xa0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a20      	ldr	r2, [pc, #128]	; (8001c5c <HAL_DMA_Abort_IT+0xd4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d022      	beq.n	8001c24 <HAL_DMA_Abort_IT+0x9c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <HAL_DMA_Abort_IT+0xd8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d01a      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x96>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_DMA_Abort_IT+0xdc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d012      	beq.n	8001c18 <HAL_DMA_Abort_IT+0x90>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_DMA_Abort_IT+0xe0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00a      	beq.n	8001c12 <HAL_DMA_Abort_IT+0x8a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <HAL_DMA_Abort_IT+0xe4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d102      	bne.n	8001c0c <HAL_DMA_Abort_IT+0x84>
 8001c06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c0a:	e00e      	b.n	8001c2a <HAL_DMA_Abort_IT+0xa2>
 8001c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c10:	e00b      	b.n	8001c2a <HAL_DMA_Abort_IT+0xa2>
 8001c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c16:	e008      	b.n	8001c2a <HAL_DMA_Abort_IT+0xa2>
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	e005      	b.n	8001c2a <HAL_DMA_Abort_IT+0xa2>
 8001c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c22:	e002      	b.n	8001c2a <HAL_DMA_Abort_IT+0xa2>
 8001c24:	2310      	movs	r3, #16
 8001c26:	e000      	b.n	8001c2a <HAL_DMA_Abort_IT+0xa2>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_DMA_Abort_IT+0xe8>)
 8001c2c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
    } 
  }
  return status;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40020008 	.word	0x40020008
 8001c5c:	4002001c 	.word	0x4002001c
 8001c60:	40020030 	.word	0x40020030
 8001c64:	40020044 	.word	0x40020044
 8001c68:	40020058 	.word	0x40020058
 8001c6c:	4002006c 	.word	0x4002006c
 8001c70:	40020000 	.word	0x40020000

08001c74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	2204      	movs	r2, #4
 8001c92:	409a      	lsls	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d04f      	beq.n	8001d3c <HAL_DMA_IRQHandler+0xc8>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04a      	beq.n	8001d3c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0204 	bic.w	r2, r2, #4
 8001cc2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <HAL_DMA_IRQHandler+0x1f0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d029      	beq.n	8001d22 <HAL_DMA_IRQHandler+0xae>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a65      	ldr	r2, [pc, #404]	; (8001e68 <HAL_DMA_IRQHandler+0x1f4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d022      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xaa>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <HAL_DMA_IRQHandler+0x1f8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01a      	beq.n	8001d18 <HAL_DMA_IRQHandler+0xa4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a62      	ldr	r2, [pc, #392]	; (8001e70 <HAL_DMA_IRQHandler+0x1fc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d012      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x9e>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a60      	ldr	r2, [pc, #384]	; (8001e74 <HAL_DMA_IRQHandler+0x200>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00a      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x98>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5f      	ldr	r2, [pc, #380]	; (8001e78 <HAL_DMA_IRQHandler+0x204>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d102      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x92>
 8001d00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d04:	e00e      	b.n	8001d24 <HAL_DMA_IRQHandler+0xb0>
 8001d06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d0a:	e00b      	b.n	8001d24 <HAL_DMA_IRQHandler+0xb0>
 8001d0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d10:	e008      	b.n	8001d24 <HAL_DMA_IRQHandler+0xb0>
 8001d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d16:	e005      	b.n	8001d24 <HAL_DMA_IRQHandler+0xb0>
 8001d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d1c:	e002      	b.n	8001d24 <HAL_DMA_IRQHandler+0xb0>
 8001d1e:	2340      	movs	r3, #64	; 0x40
 8001d20:	e000      	b.n	8001d24 <HAL_DMA_IRQHandler+0xb0>
 8001d22:	2304      	movs	r3, #4
 8001d24:	4a55      	ldr	r2, [pc, #340]	; (8001e7c <HAL_DMA_IRQHandler+0x208>)
 8001d26:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8094 	beq.w	8001e5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d3a:	e08e      	b.n	8001e5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	2202      	movs	r2, #2
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d056      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x186>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d051      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10b      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020a 	bic.w	r2, r2, #10
 8001d72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a38      	ldr	r2, [pc, #224]	; (8001e64 <HAL_DMA_IRQHandler+0x1f0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d029      	beq.n	8001dda <HAL_DMA_IRQHandler+0x166>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a37      	ldr	r2, [pc, #220]	; (8001e68 <HAL_DMA_IRQHandler+0x1f4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d022      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x162>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a35      	ldr	r2, [pc, #212]	; (8001e6c <HAL_DMA_IRQHandler+0x1f8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x15c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <HAL_DMA_IRQHandler+0x1fc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d012      	beq.n	8001dca <HAL_DMA_IRQHandler+0x156>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <HAL_DMA_IRQHandler+0x200>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00a      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x150>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a31      	ldr	r2, [pc, #196]	; (8001e78 <HAL_DMA_IRQHandler+0x204>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d102      	bne.n	8001dbe <HAL_DMA_IRQHandler+0x14a>
 8001db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dbc:	e00e      	b.n	8001ddc <HAL_DMA_IRQHandler+0x168>
 8001dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc2:	e00b      	b.n	8001ddc <HAL_DMA_IRQHandler+0x168>
 8001dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc8:	e008      	b.n	8001ddc <HAL_DMA_IRQHandler+0x168>
 8001dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dce:	e005      	b.n	8001ddc <HAL_DMA_IRQHandler+0x168>
 8001dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd4:	e002      	b.n	8001ddc <HAL_DMA_IRQHandler+0x168>
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e000      	b.n	8001ddc <HAL_DMA_IRQHandler+0x168>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_DMA_IRQHandler+0x208>)
 8001dde:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d034      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001df8:	e02f      	b.n	8001e5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2208      	movs	r2, #8
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d028      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x1e8>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d023      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 020e 	bic.w	r2, r2, #14
 8001e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
    }
  }
  return;
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
}
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40020008 	.word	0x40020008
 8001e68:	4002001c 	.word	0x4002001c
 8001e6c:	40020030 	.word	0x40020030
 8001e70:	40020044 	.word	0x40020044
 8001e74:	40020058 	.word	0x40020058
 8001e78:	4002006c 	.word	0x4002006c
 8001e7c:	40020000 	.word	0x40020000

08001e80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d108      	bne.n	8001ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ebe:	e007      	b.n	8001ed0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b08b      	sub	sp, #44	; 0x2c
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eee:	e169      	b.n	80021c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 8158 	bne.w	80021be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4a9a      	ldr	r2, [pc, #616]	; (800217c <HAL_GPIO_Init+0x2a0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d05e      	beq.n	8001fd6 <HAL_GPIO_Init+0xfa>
 8001f18:	4a98      	ldr	r2, [pc, #608]	; (800217c <HAL_GPIO_Init+0x2a0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d875      	bhi.n	800200a <HAL_GPIO_Init+0x12e>
 8001f1e:	4a98      	ldr	r2, [pc, #608]	; (8002180 <HAL_GPIO_Init+0x2a4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d058      	beq.n	8001fd6 <HAL_GPIO_Init+0xfa>
 8001f24:	4a96      	ldr	r2, [pc, #600]	; (8002180 <HAL_GPIO_Init+0x2a4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d86f      	bhi.n	800200a <HAL_GPIO_Init+0x12e>
 8001f2a:	4a96      	ldr	r2, [pc, #600]	; (8002184 <HAL_GPIO_Init+0x2a8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d052      	beq.n	8001fd6 <HAL_GPIO_Init+0xfa>
 8001f30:	4a94      	ldr	r2, [pc, #592]	; (8002184 <HAL_GPIO_Init+0x2a8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d869      	bhi.n	800200a <HAL_GPIO_Init+0x12e>
 8001f36:	4a94      	ldr	r2, [pc, #592]	; (8002188 <HAL_GPIO_Init+0x2ac>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d04c      	beq.n	8001fd6 <HAL_GPIO_Init+0xfa>
 8001f3c:	4a92      	ldr	r2, [pc, #584]	; (8002188 <HAL_GPIO_Init+0x2ac>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d863      	bhi.n	800200a <HAL_GPIO_Init+0x12e>
 8001f42:	4a92      	ldr	r2, [pc, #584]	; (800218c <HAL_GPIO_Init+0x2b0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d046      	beq.n	8001fd6 <HAL_GPIO_Init+0xfa>
 8001f48:	4a90      	ldr	r2, [pc, #576]	; (800218c <HAL_GPIO_Init+0x2b0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d85d      	bhi.n	800200a <HAL_GPIO_Init+0x12e>
 8001f4e:	2b12      	cmp	r3, #18
 8001f50:	d82a      	bhi.n	8001fa8 <HAL_GPIO_Init+0xcc>
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d859      	bhi.n	800200a <HAL_GPIO_Init+0x12e>
 8001f56:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <HAL_GPIO_Init+0x80>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001fd7 	.word	0x08001fd7
 8001f60:	08001fb1 	.word	0x08001fb1
 8001f64:	08001fc3 	.word	0x08001fc3
 8001f68:	08002005 	.word	0x08002005
 8001f6c:	0800200b 	.word	0x0800200b
 8001f70:	0800200b 	.word	0x0800200b
 8001f74:	0800200b 	.word	0x0800200b
 8001f78:	0800200b 	.word	0x0800200b
 8001f7c:	0800200b 	.word	0x0800200b
 8001f80:	0800200b 	.word	0x0800200b
 8001f84:	0800200b 	.word	0x0800200b
 8001f88:	0800200b 	.word	0x0800200b
 8001f8c:	0800200b 	.word	0x0800200b
 8001f90:	0800200b 	.word	0x0800200b
 8001f94:	0800200b 	.word	0x0800200b
 8001f98:	0800200b 	.word	0x0800200b
 8001f9c:	0800200b 	.word	0x0800200b
 8001fa0:	08001fb9 	.word	0x08001fb9
 8001fa4:	08001fcd 	.word	0x08001fcd
 8001fa8:	4a79      	ldr	r2, [pc, #484]	; (8002190 <HAL_GPIO_Init+0x2b4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fae:	e02c      	b.n	800200a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	623b      	str	r3, [r7, #32]
          break;
 8001fb6:	e029      	b.n	800200c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e024      	b.n	800200c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	623b      	str	r3, [r7, #32]
          break;
 8001fca:	e01f      	b.n	800200c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	330c      	adds	r3, #12
 8001fd2:	623b      	str	r3, [r7, #32]
          break;
 8001fd4:	e01a      	b.n	800200c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e013      	b.n	800200c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fec:	2308      	movs	r3, #8
 8001fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	611a      	str	r2, [r3, #16]
          break;
 8001ff6:	e009      	b.n	800200c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	615a      	str	r2, [r3, #20]
          break;
 8002002:	e003      	b.n	800200c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
          break;
 8002008:	e000      	b.n	800200c <HAL_GPIO_Init+0x130>
          break;
 800200a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2bff      	cmp	r3, #255	; 0xff
 8002010:	d801      	bhi.n	8002016 <HAL_GPIO_Init+0x13a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	e001      	b.n	800201a <HAL_GPIO_Init+0x13e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2bff      	cmp	r3, #255	; 0xff
 8002020:	d802      	bhi.n	8002028 <HAL_GPIO_Init+0x14c>
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	e002      	b.n	800202e <HAL_GPIO_Init+0x152>
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	3b08      	subs	r3, #8
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	210f      	movs	r1, #15
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	401a      	ands	r2, r3
 8002040:	6a39      	ldr	r1, [r7, #32]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80b1 	beq.w	80021be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800205c:	4b4d      	ldr	r3, [pc, #308]	; (8002194 <HAL_GPIO_Init+0x2b8>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a4c      	ldr	r2, [pc, #304]	; (8002194 <HAL_GPIO_Init+0x2b8>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_GPIO_Init+0x2b8>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002074:	4a48      	ldr	r2, [pc, #288]	; (8002198 <HAL_GPIO_Init+0x2bc>)
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002080:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a40      	ldr	r2, [pc, #256]	; (800219c <HAL_GPIO_Init+0x2c0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_GPIO_Init+0x1ec>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3f      	ldr	r2, [pc, #252]	; (80021a0 <HAL_GPIO_Init+0x2c4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00d      	beq.n	80020c4 <HAL_GPIO_Init+0x1e8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <HAL_GPIO_Init+0x2c8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <HAL_GPIO_Init+0x1e4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <HAL_GPIO_Init+0x2cc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_GPIO_Init+0x1e0>
 80020b8:	2303      	movs	r3, #3
 80020ba:	e006      	b.n	80020ca <HAL_GPIO_Init+0x1ee>
 80020bc:	2304      	movs	r3, #4
 80020be:	e004      	b.n	80020ca <HAL_GPIO_Init+0x1ee>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_Init+0x1ee>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_GPIO_Init+0x1ee>
 80020c8:	2300      	movs	r3, #0
 80020ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020cc:	f002 0203 	and.w	r2, r2, #3
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	4093      	lsls	r3, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020da:	492f      	ldr	r1, [pc, #188]	; (8002198 <HAL_GPIO_Init+0x2bc>)
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	492c      	ldr	r1, [pc, #176]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002102:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	4928      	ldr	r1, [pc, #160]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800210c:	4013      	ands	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4922      	ldr	r1, [pc, #136]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	491e      	ldr	r1, [pc, #120]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	4918      	ldr	r1, [pc, #96]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	4914      	ldr	r1, [pc, #80]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d021      	beq.n	80021b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
 8002178:	e021      	b.n	80021be <HAL_GPIO_Init+0x2e2>
 800217a:	bf00      	nop
 800217c:	10320000 	.word	0x10320000
 8002180:	10310000 	.word	0x10310000
 8002184:	10220000 	.word	0x10220000
 8002188:	10210000 	.word	0x10210000
 800218c:	10120000 	.word	0x10120000
 8002190:	10110000 	.word	0x10110000
 8002194:	40021000 	.word	0x40021000
 8002198:	40010000 	.word	0x40010000
 800219c:	40010800 	.word	0x40010800
 80021a0:	40010c00 	.word	0x40010c00
 80021a4:	40011000 	.word	0x40011000
 80021a8:	40011400 	.word	0x40011400
 80021ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_GPIO_Init+0x304>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4909      	ldr	r1, [pc, #36]	; (80021e0 <HAL_GPIO_Init+0x304>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	3301      	adds	r3, #1
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f47f ae8e 	bne.w	8001ef0 <HAL_GPIO_Init+0x14>
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	372c      	adds	r7, #44	; 0x2c
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	40010400 	.word	0x40010400

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	041a      	lsls	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f806 	bl	8002244 <HAL_GPIO_EXTI_Callback>
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40010400 	.word	0x40010400

08002244 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e26c      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8087 	beq.w	8002386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002278:	4b92      	ldr	r3, [pc, #584]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b04      	cmp	r3, #4
 8002282:	d00c      	beq.n	800229e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002284:	4b8f      	ldr	r3, [pc, #572]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d112      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5e>
 8002290:	4b8c      	ldr	r3, [pc, #560]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d10b      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229e:	4b89      	ldr	r3, [pc, #548]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d06c      	beq.n	8002384 <HAL_RCC_OscConfig+0x12c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d168      	bne.n	8002384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e246      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x76>
 80022c0:	4b80      	ldr	r3, [pc, #512]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7f      	ldr	r2, [pc, #508]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e02e      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x98>
 80022d6:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a77      	ldr	r2, [pc, #476]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0xbc>
 80022fa:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a71      	ldr	r2, [pc, #452]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 8002314:	4b6b      	ldr	r3, [pc, #428]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a6a      	ldr	r2, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a67      	ldr	r2, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fa32 	bl	800179c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fa2e 	bl	800179c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1fa      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0xe4>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fa1e 	bl	800179c <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff fa1a 	bl	800179c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1e6      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x10c>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d063      	beq.n	800245a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d11c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x18c>
 80023aa:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d116      	bne.n	80023e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x176>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1ba      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4939      	ldr	r1, [pc, #228]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	e03a      	b.n	800245a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ec:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_RCC_OscConfig+0x270>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff f9d3 	bl	800179c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7ff f9cf 	bl	800179c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e19b      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4927      	ldr	r1, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <HAL_RCC_OscConfig+0x270>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff f9b2 	bl	800179c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff f9ae 	bl	800179c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e17a      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d03a      	beq.n	80024dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d019      	beq.n	80024a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002474:	f7ff f992 	bl	800179c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7ff f98e 	bl	800179c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e15a      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f000 fad8 	bl	8002a50 <RCC_Delay>
 80024a0:	e01c      	b.n	80024dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7ff f978 	bl	800179c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ae:	e00f      	b.n	80024d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7ff f974 	bl	800179c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d908      	bls.n	80024d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e140      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	42420000 	.word	0x42420000
 80024cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b9e      	ldr	r3, [pc, #632]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e9      	bne.n	80024b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a6 	beq.w	8002636 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b97      	ldr	r3, [pc, #604]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b94      	ldr	r3, [pc, #592]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a93      	ldr	r2, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]
 8002506:	4b91      	ldr	r3, [pc, #580]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b8e      	ldr	r3, [pc, #568]	; (8002750 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002522:	4b8b      	ldr	r3, [pc, #556]	; (8002750 <HAL_RCC_OscConfig+0x4f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a8a      	ldr	r2, [pc, #552]	; (8002750 <HAL_RCC_OscConfig+0x4f8>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7ff f935 	bl	800179c <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7ff f931 	bl	800179c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b64      	cmp	r3, #100	; 0x64
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0fd      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x312>
 800255c:	4b7b      	ldr	r3, [pc, #492]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a7a      	ldr	r2, [pc, #488]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	e02d      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x334>
 8002572:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a75      	ldr	r2, [pc, #468]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a72      	ldr	r2, [pc, #456]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	e01c      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x356>
 8002594:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a6c      	ldr	r2, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a69      	ldr	r2, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a66      	ldr	r2, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a63      	ldr	r2, [pc, #396]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7ff f8e5 	bl	800179c <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7ff f8e1 	bl	800179c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0ab      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCC_OscConfig+0x37e>
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7ff f8cf 	bl	800179c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7ff f8cb 	bl	800179c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e095      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	4b4c      	ldr	r3, [pc, #304]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b48      	ldr	r3, [pc, #288]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4a47      	ldr	r2, [pc, #284]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8081 	beq.w	8002742 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002640:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d061      	beq.n	8002710 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d146      	bne.n	80026e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x4fc>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7ff f89f 	bl	800179c <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff f89b 	bl	800179c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e067      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d108      	bne.n	800269c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800268a:	4b30      	ldr	r3, [pc, #192]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	492d      	ldr	r1, [pc, #180]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a19      	ldr	r1, [r3, #32]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	430b      	orrs	r3, r1
 80026ae:	4927      	ldr	r1, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x4fc>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7ff f86f 	bl	800179c <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7ff f86b 	bl	800179c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e037      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x46a>
 80026e0:	e02f      	b.n	8002742 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_RCC_OscConfig+0x4fc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff f858 	bl	800179c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7ff f854 	bl	800179c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e020      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x498>
 800270e:	e018      	b.n	8002742 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e013      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_OscConfig+0x4f4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	429a      	cmp	r2, r3
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	42420060 	.word	0x42420060

08002758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0d0      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d910      	bls.n	800279c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4965      	ldr	r1, [pc, #404]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0b8      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b4:	4b59      	ldr	r3, [pc, #356]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a58      	ldr	r2, [pc, #352]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027cc:	4b53      	ldr	r3, [pc, #332]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	494d      	ldr	r1, [pc, #308]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d040      	beq.n	8002878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d115      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e07f      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e073      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06b      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4936      	ldr	r1, [pc, #216]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7fe ffa8 	bl	800179c <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7fe ffa4 	bl	800179c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e053      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d210      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0207 	bic.w	r2, r3, #7
 800288e:	4922      	ldr	r1, [pc, #136]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e032      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4916      	ldr	r1, [pc, #88]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	490e      	ldr	r1, [pc, #56]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028e6:	f000 f821 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	490a      	ldr	r1, [pc, #40]	; (8002920 <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1cc>)
 8002900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1d0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe ff06 	bl	8001718 <HAL_InitTick>

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40022000 	.word	0x40022000
 800291c:	40021000 	.word	0x40021000
 8002920:	08004d14 	.word	0x08004d14
 8002924:	20000004 	.word	0x20000004
 8002928:	20000008 	.word	0x20000008

0800292c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	b490      	push	{r4, r7}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002934:	1d3c      	adds	r4, r7, #4
 8002936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800293c:	f240 2301 	movw	r3, #513	; 0x201
 8002940:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b04      	cmp	r3, #4
 8002964:	d002      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x40>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x46>
 800296a:	e02d      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296e:	623b      	str	r3, [r7, #32]
      break;
 8002970:	e02d      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800297e:	4413      	add	r3, r2
 8002980:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002984:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	0c5b      	lsrs	r3, r3, #17
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800299e:	4413      	add	r3, r2
 80029a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029aa:	fb02 f203 	mul.w	r2, r2, r3
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	e004      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029bc:	fb02 f303 	mul.w	r3, r2, r3
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	623b      	str	r3, [r7, #32]
      break;
 80029c6:	e002      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ca:	623b      	str	r3, [r7, #32]
      break;
 80029cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc90      	pop	{r4, r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	08004d04 	.word	0x08004d04
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	003d0900 	.word	0x003d0900

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <HAL_RCC_GetHCLKFreq+0x10>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000004 	.word	0x20000004

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff2 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08004d24 	.word	0x08004d24

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0adb      	lsrs	r3, r3, #11
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4903      	ldr	r1, [pc, #12]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08004d24 	.word	0x08004d24

08002a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <RCC_Delay+0x34>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <RCC_Delay+0x38>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0a5b      	lsrs	r3, r3, #9
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a6c:	bf00      	nop
  }
  while (Delay --);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	60fa      	str	r2, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f9      	bne.n	8002a6c <RCC_Delay+0x1c>
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	20000004 	.word	0x20000004
 8002a88:	10624dd3 	.word	0x10624dd3

08002a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e041      	b.n	8002b22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe fce4 	bl	8001480 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f000 fd54 	bl	8003578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_TIM_PWM_Start_DMA+0x28>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e022      	b.n	8002b9a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d109      	bne.n	8002b6e <HAL_TIM_PWM_Start_DMA+0x42>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e015      	b.n	8002b9a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d109      	bne.n	8002b88 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e008      	b.n	8002b9a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e14e      	b.n	8002e40 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_TIM_PWM_Start_DMA+0x90>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e022      	b.n	8002c02 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d109      	bne.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	e015      	b.n	8002c02 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d109      	bne.n	8002bf0 <HAL_TIM_PWM_Start_DMA+0xc4>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e008      	b.n	8002c02 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d024      	beq.n	8002c50 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start_DMA+0xea>
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e114      	b.n	8002e40 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_PWM_Start_DMA+0xfa>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c24:	e016      	b.n	8002c54 <HAL_TIM_PWM_Start_DMA+0x128>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d104      	bne.n	8002c36 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c34:	e00e      	b.n	8002c54 <HAL_TIM_PWM_Start_DMA+0x128>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d104      	bne.n	8002c46 <HAL_TIM_PWM_Start_DMA+0x11a>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c44:	e006      	b.n	8002c54 <HAL_TIM_PWM_Start_DMA+0x128>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c4e:	e001      	b.n	8002c54 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0f5      	b.n	8002e40 <HAL_TIM_PWM_Start_DMA+0x314>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	f200 80ae 	bhi.w	8002db8 <HAL_TIM_PWM_Start_DMA+0x28c>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <HAL_TIM_PWM_Start_DMA+0x138>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c99 	.word	0x08002c99
 8002c68:	08002db9 	.word	0x08002db9
 8002c6c:	08002db9 	.word	0x08002db9
 8002c70:	08002db9 	.word	0x08002db9
 8002c74:	08002ce1 	.word	0x08002ce1
 8002c78:	08002db9 	.word	0x08002db9
 8002c7c:	08002db9 	.word	0x08002db9
 8002c80:	08002db9 	.word	0x08002db9
 8002c84:	08002d29 	.word	0x08002d29
 8002c88:	08002db9 	.word	0x08002db9
 8002c8c:	08002db9 	.word	0x08002db9
 8002c90:	08002db9 	.word	0x08002db9
 8002c94:	08002d71 	.word	0x08002d71
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	4a69      	ldr	r2, [pc, #420]	; (8002e4c <HAL_TIM_PWM_Start_DMA+0x320>)
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	4a68      	ldr	r2, [pc, #416]	; (8002e50 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3334      	adds	r3, #52	; 0x34
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	f7fe ff02 	bl	8001ac8 <HAL_DMA_Start_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0b8      	b.n	8002e40 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cdc:	60da      	str	r2, [r3, #12]
      break;
 8002cde:	e06c      	b.n	8002dba <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	4a57      	ldr	r2, [pc, #348]	; (8002e4c <HAL_TIM_PWM_Start_DMA+0x320>)
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	4a56      	ldr	r2, [pc, #344]	; (8002e50 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3338      	adds	r3, #56	; 0x38
 8002d04:	461a      	mov	r2, r3
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	f7fe fede 	bl	8001ac8 <HAL_DMA_Start_IT>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e094      	b.n	8002e40 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d24:	60da      	str	r2, [r3, #12]
      break;
 8002d26:	e048      	b.n	8002dba <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	4a46      	ldr	r2, [pc, #280]	; (8002e48 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	4a45      	ldr	r2, [pc, #276]	; (8002e4c <HAL_TIM_PWM_Start_DMA+0x320>)
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	4a44      	ldr	r2, [pc, #272]	; (8002e50 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	333c      	adds	r3, #60	; 0x3c
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	f7fe feba 	bl	8001ac8 <HAL_DMA_Start_IT>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e070      	b.n	8002e40 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6c:	60da      	str	r2, [r3, #12]
      break;
 8002d6e:	e024      	b.n	8002dba <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <HAL_TIM_PWM_Start_DMA+0x320>)
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4a32      	ldr	r2, [pc, #200]	; (8002e50 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3340      	adds	r3, #64	; 0x40
 8002d94:	461a      	mov	r2, r3
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	f7fe fe96 	bl	8001ac8 <HAL_DMA_Start_IT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e04c      	b.n	8002e40 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002db4:	60da      	str	r2, [r3, #12]
      break;
 8002db6:	e000      	b.n	8002dba <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8002db8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fdc2 	bl	800394c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_TIM_PWM_Start_DMA+0x2de>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d009      	beq.n	8002e0a <HAL_TIM_PWM_Start_DMA+0x2de>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_TIM_PWM_Start_DMA+0x2de>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <HAL_TIM_PWM_Start_DMA+0x330>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d010      	beq.n	8002e3e <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2c:	e007      	b.n	8002e3e <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	08003467 	.word	0x08003467
 8002e4c:	0800350f 	.word	0x0800350f
 8002e50:	080033d5 	.word	0x080033d5
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800

08002e60 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d855      	bhi.n	8002f1c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	08002f1d 	.word	0x08002f1d
 8002e80:	08002f1d 	.word	0x08002f1d
 8002e84:	08002f1d 	.word	0x08002f1d
 8002e88:	08002ec9 	.word	0x08002ec9
 8002e8c:	08002f1d 	.word	0x08002f1d
 8002e90:	08002f1d 	.word	0x08002f1d
 8002e94:	08002f1d 	.word	0x08002f1d
 8002e98:	08002ee5 	.word	0x08002ee5
 8002e9c:	08002f1d 	.word	0x08002f1d
 8002ea0:	08002f1d 	.word	0x08002f1d
 8002ea4:	08002f1d 	.word	0x08002f1d
 8002ea8:	08002f01 	.word	0x08002f01
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fe61 	bl	8001b88 <HAL_DMA_Abort_IT>
      break;
 8002ec6:	e02a      	b.n	8002f1e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fe53 	bl	8001b88 <HAL_DMA_Abort_IT>
      break;
 8002ee2:	e01c      	b.n	8002f1e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe fe45 	bl	8001b88 <HAL_DMA_Abort_IT>
      break;
 8002efe:	e00e      	b.n	8002f1e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe fe37 	bl	8001b88 <HAL_DMA_Abort_IT>
      break;
 8002f1a:	e000      	b.n	8002f1e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8002f1c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fd10 	bl	800394c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d117      	bne.n	8002f66 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	f240 4344 	movw	r3, #1092	; 0x444
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10f      	bne.n	8002f96 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	f240 4344 	movw	r3, #1092	; 0x444
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_TIM_PWM_Stop_DMA+0x136>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0201 	bic.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Stop_DMA+0x146>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Stop_DMA+0x156>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Stop_DMA+0x166>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40012c00 	.word	0x40012c00

08002fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0202 	mvn.w	r2, #2
 8003008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9b4 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9a7 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fd fe8b 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0204 	mvn.w	r2, #4
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f98a 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f97d 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fd fe61 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b08      	cmp	r3, #8
 8003098:	d122      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d11b      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0208 	mvn.w	r2, #8
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2204      	movs	r2, #4
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f960 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f953 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7fd fe37 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d122      	bne.n	8003134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d11b      	bne.n	8003134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0210 	mvn.w	r2, #16
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2208      	movs	r2, #8
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f936 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f929 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd fe0d 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0201 	mvn.w	r2, #1
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f904 	bl	8003368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fc6b 	bl	8003a62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d10e      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d107      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8fc 	bl	80033b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0220 	mvn.w	r2, #32
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fc36 	bl	8003a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003202:	2302      	movs	r3, #2
 8003204:	e0ac      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	f200 809f 	bhi.w	8003354 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003251 	.word	0x08003251
 8003220:	08003355 	.word	0x08003355
 8003224:	08003355 	.word	0x08003355
 8003228:	08003355 	.word	0x08003355
 800322c:	08003291 	.word	0x08003291
 8003230:	08003355 	.word	0x08003355
 8003234:	08003355 	.word	0x08003355
 8003238:	08003355 	.word	0x08003355
 800323c:	080032d3 	.word	0x080032d3
 8003240:	08003355 	.word	0x08003355
 8003244:	08003355 	.word	0x08003355
 8003248:	08003355 	.word	0x08003355
 800324c:	08003313 	.word	0x08003313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f9f0 	bl	800363c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6999      	ldr	r1, [r3, #24]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	619a      	str	r2, [r3, #24]
      break;
 800328e:	e062      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fa36 	bl	8003708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6999      	ldr	r1, [r3, #24]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	619a      	str	r2, [r3, #24]
      break;
 80032d0:	e041      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fa7f 	bl	80037dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0208 	orr.w	r2, r2, #8
 80032ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0204 	bic.w	r2, r2, #4
 80032fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69d9      	ldr	r1, [r3, #28]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	61da      	str	r2, [r3, #28]
      break;
 8003310:	e021      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fac9 	bl	80038b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69d9      	ldr	r1, [r3, #28]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	021a      	lsls	r2, r3, #8
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	61da      	str	r2, [r3, #28]
      break;
 8003352:	e000      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d107      	bne.n	80033fc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033fa:	e02a      	b.n	8003452 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d107      	bne.n	8003416 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2202      	movs	r2, #2
 800340a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	e01d      	b.n	8003452 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d107      	bne.n	8003430 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2204      	movs	r2, #4
 8003424:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342e:	e010      	b.n	8003452 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	429a      	cmp	r2, r3
 8003438:	d107      	bne.n	800344a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2208      	movs	r2, #8
 800343e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003448:	e003      	b.n	8003452 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff ffb5 	bl	80033c2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	771a      	strb	r2, [r3, #28]
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d10b      	bne.n	8003496 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d136      	bne.n	80034fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003494:	e031      	b.n	80034fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d10b      	bne.n	80034b8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2202      	movs	r2, #2
 80034a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d125      	bne.n	80034fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b6:	e020      	b.n	80034fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10b      	bne.n	80034da <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2204      	movs	r2, #4
 80034c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d114      	bne.n	80034fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	e00f      	b.n	80034fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d10a      	bne.n	80034fa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2208      	movs	r2, #8
 80034e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d103      	bne.n	80034fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7fd fc24 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	771a      	strb	r2, [r3, #28]
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d103      	bne.n	800352e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	771a      	strb	r2, [r3, #28]
 800352c:	e019      	b.n	8003562 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d103      	bne.n	8003540 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2202      	movs	r2, #2
 800353c:	771a      	strb	r2, [r3, #28]
 800353e:	e010      	b.n	8003562 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d103      	bne.n	8003552 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2204      	movs	r2, #4
 800354e:	771a      	strb	r2, [r3, #28]
 8003550:	e007      	b.n	8003562 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d102      	bne.n	8003562 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2208      	movs	r2, #8
 8003560:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff ff1b 	bl	800339e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	771a      	strb	r2, [r3, #28]
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a29      	ldr	r2, [pc, #164]	; (8003630 <TIM_Base_SetConfig+0xb8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00b      	beq.n	80035a8 <TIM_Base_SetConfig+0x30>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003596:	d007      	beq.n	80035a8 <TIM_Base_SetConfig+0x30>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a26      	ldr	r2, [pc, #152]	; (8003634 <TIM_Base_SetConfig+0xbc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_Base_SetConfig+0x30>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a25      	ldr	r2, [pc, #148]	; (8003638 <TIM_Base_SetConfig+0xc0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d108      	bne.n	80035ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <TIM_Base_SetConfig+0xb8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00b      	beq.n	80035da <TIM_Base_SetConfig+0x62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d007      	beq.n	80035da <TIM_Base_SetConfig+0x62>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a19      	ldr	r2, [pc, #100]	; (8003634 <TIM_Base_SetConfig+0xbc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_Base_SetConfig+0x62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <TIM_Base_SetConfig+0xc0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d108      	bne.n	80035ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <TIM_Base_SetConfig+0xb8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d103      	bne.n	8003620 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	615a      	str	r2, [r3, #20]
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800

0800363c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0201 	bic.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 0302 	bic.w	r3, r3, #2
 8003684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <TIM_OC1_SetConfig+0xc8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d10c      	bne.n	80036b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0308 	bic.w	r3, r3, #8
 800369e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a13      	ldr	r2, [pc, #76]	; (8003704 <TIM_OC1_SetConfig+0xc8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d111      	bne.n	80036de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	bf00      	nop
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40012c00 	.word	0x40012c00

08003708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0210 	bic.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0320 	bic.w	r3, r3, #32
 8003752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <TIM_OC2_SetConfig+0xd0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10d      	bne.n	8003784 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003782:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <TIM_OC2_SetConfig+0xd0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d113      	bne.n	80037b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800379a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00

080037dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <TIM_OC3_SetConfig+0xd0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d10d      	bne.n	8003856 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a14      	ldr	r2, [pc, #80]	; (80038ac <TIM_OC3_SetConfig+0xd0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d113      	bne.n	8003886 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800386c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	621a      	str	r2, [r3, #32]
}
 80038a0:	bf00      	nop
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40012c00 	.word	0x40012c00

080038b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	031b      	lsls	r3, r3, #12
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <TIM_OC4_SetConfig+0x98>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d109      	bne.n	8003924 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40012c00 	.word	0x40012c00

0800394c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e046      	b.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d009      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10c      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800

08003a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e03f      	b.n	8003b06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd fd78 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	; 0x24
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f829 	bl	8003b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b4a:	f023 030c 	bic.w	r3, r3, #12
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <UART_SetConfig+0x114>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d103      	bne.n	8003b80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b78:	f7fe ff56 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	e002      	b.n	8003b86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe ff3e 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003b84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009a      	lsls	r2, r3, #2
 8003b90:	441a      	add	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <UART_SetConfig+0x118>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	0119      	lsls	r1, r3, #4
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009a      	lsls	r2, r3, #2
 8003bb0:	441a      	add	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <UART_SetConfig+0x118>)
 8003bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	2064      	movs	r0, #100	; 0x64
 8003bc6:	fb00 f303 	mul.w	r3, r0, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	3332      	adds	r3, #50	; 0x32
 8003bd0:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <UART_SetConfig+0x118>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bdc:	4419      	add	r1, r3
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009a      	lsls	r2, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <UART_SetConfig+0x118>)
 8003bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	2064      	movs	r0, #100	; 0x64
 8003bfe:	fb00 f303 	mul.w	r3, r0, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	3332      	adds	r3, #50	; 0x32
 8003c08:	4a07      	ldr	r2, [pc, #28]	; (8003c28 <UART_SetConfig+0x118>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	f003 020f 	and.w	r2, r3, #15
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	440a      	add	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40013800 	.word	0x40013800
 8003c28:	51eb851f 	.word	0x51eb851f

08003c2c <__libc_init_array>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	2600      	movs	r6, #0
 8003c30:	4d0c      	ldr	r5, [pc, #48]	; (8003c64 <__libc_init_array+0x38>)
 8003c32:	4c0d      	ldr	r4, [pc, #52]	; (8003c68 <__libc_init_array+0x3c>)
 8003c34:	1b64      	subs	r4, r4, r5
 8003c36:	10a4      	asrs	r4, r4, #2
 8003c38:	42a6      	cmp	r6, r4
 8003c3a:	d109      	bne.n	8003c50 <__libc_init_array+0x24>
 8003c3c:	f001 f852 	bl	8004ce4 <_init>
 8003c40:	2600      	movs	r6, #0
 8003c42:	4d0a      	ldr	r5, [pc, #40]	; (8003c6c <__libc_init_array+0x40>)
 8003c44:	4c0a      	ldr	r4, [pc, #40]	; (8003c70 <__libc_init_array+0x44>)
 8003c46:	1b64      	subs	r4, r4, r5
 8003c48:	10a4      	asrs	r4, r4, #2
 8003c4a:	42a6      	cmp	r6, r4
 8003c4c:	d105      	bne.n	8003c5a <__libc_init_array+0x2e>
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c54:	4798      	blx	r3
 8003c56:	3601      	adds	r6, #1
 8003c58:	e7ee      	b.n	8003c38 <__libc_init_array+0xc>
 8003c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5e:	4798      	blx	r3
 8003c60:	3601      	adds	r6, #1
 8003c62:	e7f2      	b.n	8003c4a <__libc_init_array+0x1e>
 8003c64:	08004f08 	.word	0x08004f08
 8003c68:	08004f08 	.word	0x08004f08
 8003c6c:	08004f08 	.word	0x08004f08
 8003c70:	08004f0c 	.word	0x08004f0c

08003c74 <memset>:
 8003c74:	4603      	mov	r3, r0
 8003c76:	4402      	add	r2, r0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <memset+0xa>
 8003c7c:	4770      	bx	lr
 8003c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c82:	e7f9      	b.n	8003c78 <memset+0x4>

08003c84 <tan>:
 8003c84:	b530      	push	{r4, r5, lr}
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <tan+0x4c>)
 8003c88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	b087      	sub	sp, #28
 8003c90:	dc06      	bgt.n	8003ca0 <tan+0x1c>
 8003c92:	2301      	movs	r3, #1
 8003c94:	2200      	movs	r2, #0
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f000 fd55 	bl	8004748 <__kernel_tan>
 8003c9e:	e006      	b.n	8003cae <tan+0x2a>
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <tan+0x50>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	dd05      	ble.n	8003cb2 <tan+0x2e>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	f7fc fa55 	bl	8000158 <__aeabi_dsub>
 8003cae:	b007      	add	sp, #28
 8003cb0:	bd30      	pop	{r4, r5, pc}
 8003cb2:	aa02      	add	r2, sp, #8
 8003cb4:	f000 f810 	bl	8003cd8 <__ieee754_rem_pio2>
 8003cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cbc:	0040      	lsls	r0, r0, #1
 8003cbe:	f000 0002 	and.w	r0, r0, #2
 8003cc2:	f1c0 0001 	rsb	r0, r0, #1
 8003cc6:	9000      	str	r0, [sp, #0]
 8003cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ccc:	e7e5      	b.n	8003c9a <tan+0x16>
 8003cce:	bf00      	nop
 8003cd0:	3fe921fb 	.word	0x3fe921fb
 8003cd4:	7fefffff 	.word	0x7fefffff

08003cd8 <__ieee754_rem_pio2>:
 8003cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	4614      	mov	r4, r2
 8003cde:	4ac4      	ldr	r2, [pc, #784]	; (8003ff0 <__ieee754_rem_pio2+0x318>)
 8003ce0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8003ce4:	b08d      	sub	sp, #52	; 0x34
 8003ce6:	4592      	cmp	sl, r2
 8003ce8:	9104      	str	r1, [sp, #16]
 8003cea:	dc07      	bgt.n	8003cfc <__ieee754_rem_pio2+0x24>
 8003cec:	2200      	movs	r2, #0
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e9c4 0100 	strd	r0, r1, [r4]
 8003cf4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	e024      	b.n	8003d46 <__ieee754_rem_pio2+0x6e>
 8003cfc:	4abd      	ldr	r2, [pc, #756]	; (8003ff4 <__ieee754_rem_pio2+0x31c>)
 8003cfe:	4592      	cmp	sl, r2
 8003d00:	dc72      	bgt.n	8003de8 <__ieee754_rem_pio2+0x110>
 8003d02:	9b04      	ldr	r3, [sp, #16]
 8003d04:	4dbc      	ldr	r5, [pc, #752]	; (8003ff8 <__ieee754_rem_pio2+0x320>)
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	a3ab      	add	r3, pc, #684	; (adr r3, 8003fb8 <__ieee754_rem_pio2+0x2e0>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	dd36      	ble.n	8003d7e <__ieee754_rem_pio2+0xa6>
 8003d10:	f7fc fa22 	bl	8000158 <__aeabi_dsub>
 8003d14:	45aa      	cmp	sl, r5
 8003d16:	4606      	mov	r6, r0
 8003d18:	460f      	mov	r7, r1
 8003d1a:	d018      	beq.n	8003d4e <__ieee754_rem_pio2+0x76>
 8003d1c:	a3a8      	add	r3, pc, #672	; (adr r3, 8003fc0 <__ieee754_rem_pio2+0x2e8>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fa19 	bl	8000158 <__aeabi_dsub>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	e9c4 2300 	strd	r2, r3, [r4]
 8003d30:	4639      	mov	r1, r7
 8003d32:	f7fc fa11 	bl	8000158 <__aeabi_dsub>
 8003d36:	a3a2      	add	r3, pc, #648	; (adr r3, 8003fc0 <__ieee754_rem_pio2+0x2e8>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f7fc fa0c 	bl	8000158 <__aeabi_dsub>
 8003d40:	2501      	movs	r5, #1
 8003d42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d46:	4628      	mov	r0, r5
 8003d48:	b00d      	add	sp, #52	; 0x34
 8003d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d4e:	a39e      	add	r3, pc, #632	; (adr r3, 8003fc8 <__ieee754_rem_pio2+0x2f0>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fa00 	bl	8000158 <__aeabi_dsub>
 8003d58:	a39d      	add	r3, pc, #628	; (adr r3, 8003fd0 <__ieee754_rem_pio2+0x2f8>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	4606      	mov	r6, r0
 8003d60:	460f      	mov	r7, r1
 8003d62:	f7fc f9f9 	bl	8000158 <__aeabi_dsub>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	e9c4 2300 	strd	r2, r3, [r4]
 8003d70:	4639      	mov	r1, r7
 8003d72:	f7fc f9f1 	bl	8000158 <__aeabi_dsub>
 8003d76:	a396      	add	r3, pc, #600	; (adr r3, 8003fd0 <__ieee754_rem_pio2+0x2f8>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	e7de      	b.n	8003d3c <__ieee754_rem_pio2+0x64>
 8003d7e:	f7fc f9ed 	bl	800015c <__adddf3>
 8003d82:	45aa      	cmp	sl, r5
 8003d84:	4606      	mov	r6, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	d016      	beq.n	8003db8 <__ieee754_rem_pio2+0xe0>
 8003d8a:	a38d      	add	r3, pc, #564	; (adr r3, 8003fc0 <__ieee754_rem_pio2+0x2e8>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f7fc f9e4 	bl	800015c <__adddf3>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4630      	mov	r0, r6
 8003d9a:	e9c4 2300 	strd	r2, r3, [r4]
 8003d9e:	4639      	mov	r1, r7
 8003da0:	f7fc f9da 	bl	8000158 <__aeabi_dsub>
 8003da4:	a386      	add	r3, pc, #536	; (adr r3, 8003fc0 <__ieee754_rem_pio2+0x2e8>)
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f7fc f9d7 	bl	800015c <__adddf3>
 8003dae:	f04f 35ff 	mov.w	r5, #4294967295
 8003db2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003db6:	e7c6      	b.n	8003d46 <__ieee754_rem_pio2+0x6e>
 8003db8:	a383      	add	r3, pc, #524	; (adr r3, 8003fc8 <__ieee754_rem_pio2+0x2f0>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc f9cd 	bl	800015c <__adddf3>
 8003dc2:	a383      	add	r3, pc, #524	; (adr r3, 8003fd0 <__ieee754_rem_pio2+0x2f8>)
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	4606      	mov	r6, r0
 8003dca:	460f      	mov	r7, r1
 8003dcc:	f7fc f9c6 	bl	800015c <__adddf3>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	e9c4 2300 	strd	r2, r3, [r4]
 8003dda:	4639      	mov	r1, r7
 8003ddc:	f7fc f9bc 	bl	8000158 <__aeabi_dsub>
 8003de0:	a37b      	add	r3, pc, #492	; (adr r3, 8003fd0 <__ieee754_rem_pio2+0x2f8>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	e7e0      	b.n	8003daa <__ieee754_rem_pio2+0xd2>
 8003de8:	4a84      	ldr	r2, [pc, #528]	; (8003ffc <__ieee754_rem_pio2+0x324>)
 8003dea:	4592      	cmp	sl, r2
 8003dec:	f300 80d5 	bgt.w	8003f9a <__ieee754_rem_pio2+0x2c2>
 8003df0:	f000 fe6e 	bl	8004ad0 <fabs>
 8003df4:	a378      	add	r3, pc, #480	; (adr r3, 8003fd8 <__ieee754_rem_pio2+0x300>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	460f      	mov	r7, r1
 8003dfe:	f7fc fb63 	bl	80004c8 <__aeabi_dmul>
 8003e02:	2200      	movs	r2, #0
 8003e04:	4b7e      	ldr	r3, [pc, #504]	; (8004000 <__ieee754_rem_pio2+0x328>)
 8003e06:	f7fc f9a9 	bl	800015c <__adddf3>
 8003e0a:	f7fc fdf7 	bl	80009fc <__aeabi_d2iz>
 8003e0e:	4605      	mov	r5, r0
 8003e10:	f7fc faf0 	bl	80003f4 <__aeabi_i2d>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e1c:	a366      	add	r3, pc, #408	; (adr r3, 8003fb8 <__ieee754_rem_pio2+0x2e0>)
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f7fc fb51 	bl	80004c8 <__aeabi_dmul>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	f7fc f993 	bl	8000158 <__aeabi_dsub>
 8003e32:	a363      	add	r3, pc, #396	; (adr r3, 8003fc0 <__ieee754_rem_pio2+0x2e8>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4689      	mov	r9, r1
 8003e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e40:	f7fc fb42 	bl	80004c8 <__aeabi_dmul>
 8003e44:	2d1f      	cmp	r5, #31
 8003e46:	4606      	mov	r6, r0
 8003e48:	460f      	mov	r7, r1
 8003e4a:	dc0e      	bgt.n	8003e6a <__ieee754_rem_pio2+0x192>
 8003e4c:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <__ieee754_rem_pio2+0x32c>)
 8003e4e:	1e6a      	subs	r2, r5, #1
 8003e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e54:	4553      	cmp	r3, sl
 8003e56:	d008      	beq.n	8003e6a <__ieee754_rem_pio2+0x192>
 8003e58:	4632      	mov	r2, r6
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	4640      	mov	r0, r8
 8003e5e:	4649      	mov	r1, r9
 8003e60:	f7fc f97a 	bl	8000158 <__aeabi_dsub>
 8003e64:	e9c4 0100 	strd	r0, r1, [r4]
 8003e68:	e013      	b.n	8003e92 <__ieee754_rem_pio2+0x1ba>
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	4632      	mov	r2, r6
 8003e6e:	4640      	mov	r0, r8
 8003e70:	4649      	mov	r1, r9
 8003e72:	f7fc f971 	bl	8000158 <__aeabi_dsub>
 8003e76:	ea4f 532a 	mov.w	r3, sl, asr #20
 8003e7a:	9305      	str	r3, [sp, #20]
 8003e7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e80:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8003e84:	f1ba 0f10 	cmp.w	sl, #16
 8003e88:	dc1f      	bgt.n	8003eca <__ieee754_rem_pio2+0x1f2>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	e9c4 2300 	strd	r2, r3, [r4]
 8003e92:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003e96:	4640      	mov	r0, r8
 8003e98:	4653      	mov	r3, sl
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	f7fc f95c 	bl	8000158 <__aeabi_dsub>
 8003ea0:	4632      	mov	r2, r6
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	f7fc f958 	bl	8000158 <__aeabi_dsub>
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003eae:	9904      	ldr	r1, [sp, #16]
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	2900      	cmp	r1, #0
 8003eb4:	f6bf af47 	bge.w	8003d46 <__ieee754_rem_pio2+0x6e>
 8003eb8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8003ebc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003ec0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ec4:	60e3      	str	r3, [r4, #12]
 8003ec6:	426d      	negs	r5, r5
 8003ec8:	e73d      	b.n	8003d46 <__ieee754_rem_pio2+0x6e>
 8003eca:	a33f      	add	r3, pc, #252	; (adr r3, 8003fc8 <__ieee754_rem_pio2+0x2f0>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ed4:	f7fc faf8 	bl	80004c8 <__aeabi_dmul>
 8003ed8:	4606      	mov	r6, r0
 8003eda:	460f      	mov	r7, r1
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	f7fc f938 	bl	8000158 <__aeabi_dsub>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4682      	mov	sl, r0
 8003eee:	468b      	mov	fp, r1
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	f7fc f930 	bl	8000158 <__aeabi_dsub>
 8003ef8:	4632      	mov	r2, r6
 8003efa:	463b      	mov	r3, r7
 8003efc:	f7fc f92c 	bl	8000158 <__aeabi_dsub>
 8003f00:	a333      	add	r3, pc, #204	; (adr r3, 8003fd0 <__ieee754_rem_pio2+0x2f8>)
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	4606      	mov	r6, r0
 8003f08:	460f      	mov	r7, r1
 8003f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f0e:	f7fc fadb 	bl	80004c8 <__aeabi_dmul>
 8003f12:	4632      	mov	r2, r6
 8003f14:	463b      	mov	r3, r7
 8003f16:	f7fc f91f 	bl	8000158 <__aeabi_dsub>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4606      	mov	r6, r0
 8003f20:	460f      	mov	r7, r1
 8003f22:	4650      	mov	r0, sl
 8003f24:	4659      	mov	r1, fp
 8003f26:	f7fc f917 	bl	8000158 <__aeabi_dsub>
 8003f2a:	9a05      	ldr	r2, [sp, #20]
 8003f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b31      	cmp	r3, #49	; 0x31
 8003f34:	dc06      	bgt.n	8003f44 <__ieee754_rem_pio2+0x26c>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	46d0      	mov	r8, sl
 8003f3c:	46d9      	mov	r9, fp
 8003f3e:	e9c4 2300 	strd	r2, r3, [r4]
 8003f42:	e7a6      	b.n	8003e92 <__ieee754_rem_pio2+0x1ba>
 8003f44:	a326      	add	r3, pc, #152	; (adr r3, 8003fe0 <__ieee754_rem_pio2+0x308>)
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f4e:	f7fc fabb 	bl	80004c8 <__aeabi_dmul>
 8003f52:	4606      	mov	r6, r0
 8003f54:	460f      	mov	r7, r1
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4650      	mov	r0, sl
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	f7fc f8fb 	bl	8000158 <__aeabi_dsub>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4680      	mov	r8, r0
 8003f68:	4689      	mov	r9, r1
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	f7fc f8f3 	bl	8000158 <__aeabi_dsub>
 8003f72:	4632      	mov	r2, r6
 8003f74:	463b      	mov	r3, r7
 8003f76:	f7fc f8ef 	bl	8000158 <__aeabi_dsub>
 8003f7a:	a31b      	add	r3, pc, #108	; (adr r3, 8003fe8 <__ieee754_rem_pio2+0x310>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	4606      	mov	r6, r0
 8003f82:	460f      	mov	r7, r1
 8003f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f88:	f7fc fa9e 	bl	80004c8 <__aeabi_dmul>
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	463b      	mov	r3, r7
 8003f90:	f7fc f8e2 	bl	8000158 <__aeabi_dsub>
 8003f94:	4606      	mov	r6, r0
 8003f96:	460f      	mov	r7, r1
 8003f98:	e75e      	b.n	8003e58 <__ieee754_rem_pio2+0x180>
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <__ieee754_rem_pio2+0x330>)
 8003f9c:	4592      	cmp	sl, r2
 8003f9e:	dd35      	ble.n	800400c <__ieee754_rem_pio2+0x334>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	f7fc f8d8 	bl	8000158 <__aeabi_dsub>
 8003fa8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003fac:	e9c4 0100 	strd	r0, r1, [r4]
 8003fb0:	e6a2      	b.n	8003cf8 <__ieee754_rem_pio2+0x20>
 8003fb2:	bf00      	nop
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	54400000 	.word	0x54400000
 8003fbc:	3ff921fb 	.word	0x3ff921fb
 8003fc0:	1a626331 	.word	0x1a626331
 8003fc4:	3dd0b461 	.word	0x3dd0b461
 8003fc8:	1a600000 	.word	0x1a600000
 8003fcc:	3dd0b461 	.word	0x3dd0b461
 8003fd0:	2e037073 	.word	0x2e037073
 8003fd4:	3ba3198a 	.word	0x3ba3198a
 8003fd8:	6dc9c883 	.word	0x6dc9c883
 8003fdc:	3fe45f30 	.word	0x3fe45f30
 8003fe0:	2e000000 	.word	0x2e000000
 8003fe4:	3ba3198a 	.word	0x3ba3198a
 8003fe8:	252049c1 	.word	0x252049c1
 8003fec:	397b839a 	.word	0x397b839a
 8003ff0:	3fe921fb 	.word	0x3fe921fb
 8003ff4:	4002d97b 	.word	0x4002d97b
 8003ff8:	3ff921fb 	.word	0x3ff921fb
 8003ffc:	413921fb 	.word	0x413921fb
 8004000:	3fe00000 	.word	0x3fe00000
 8004004:	08004d2c 	.word	0x08004d2c
 8004008:	7fefffff 	.word	0x7fefffff
 800400c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004010:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004014:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004018:	460f      	mov	r7, r1
 800401a:	4606      	mov	r6, r0
 800401c:	f7fc fcee 	bl	80009fc <__aeabi_d2iz>
 8004020:	f7fc f9e8 	bl	80003f4 <__aeabi_i2d>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4630      	mov	r0, r6
 800402a:	4639      	mov	r1, r7
 800402c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004030:	f7fc f892 	bl	8000158 <__aeabi_dsub>
 8004034:	2200      	movs	r2, #0
 8004036:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <__ieee754_rem_pio2+0x3d8>)
 8004038:	f7fc fa46 	bl	80004c8 <__aeabi_dmul>
 800403c:	460f      	mov	r7, r1
 800403e:	4606      	mov	r6, r0
 8004040:	f7fc fcdc 	bl	80009fc <__aeabi_d2iz>
 8004044:	f7fc f9d6 	bl	80003f4 <__aeabi_i2d>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4630      	mov	r0, r6
 800404e:	4639      	mov	r1, r7
 8004050:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004054:	f7fc f880 	bl	8000158 <__aeabi_dsub>
 8004058:	2200      	movs	r2, #0
 800405a:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <__ieee754_rem_pio2+0x3d8>)
 800405c:	f7fc fa34 	bl	80004c8 <__aeabi_dmul>
 8004060:	f04f 0803 	mov.w	r8, #3
 8004064:	2600      	movs	r6, #0
 8004066:	2700      	movs	r7, #0
 8004068:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800406c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004070:	4632      	mov	r2, r6
 8004072:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8004076:	463b      	mov	r3, r7
 8004078:	46c2      	mov	sl, r8
 800407a:	f108 38ff 	add.w	r8, r8, #4294967295
 800407e:	f7fc fc8b 	bl	8000998 <__aeabi_dcmpeq>
 8004082:	2800      	cmp	r0, #0
 8004084:	d1f4      	bne.n	8004070 <__ieee754_rem_pio2+0x398>
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <__ieee754_rem_pio2+0x3dc>)
 8004088:	462a      	mov	r2, r5
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	2302      	movs	r3, #2
 800408e:	4621      	mov	r1, r4
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	a806      	add	r0, sp, #24
 8004094:	4653      	mov	r3, sl
 8004096:	f000 f80f 	bl	80040b8 <__kernel_rem_pio2>
 800409a:	9b04      	ldr	r3, [sp, #16]
 800409c:	4605      	mov	r5, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f6bf ae51 	bge.w	8003d46 <__ieee754_rem_pio2+0x6e>
 80040a4:	6863      	ldr	r3, [r4, #4]
 80040a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80040aa:	6063      	str	r3, [r4, #4]
 80040ac:	68e3      	ldr	r3, [r4, #12]
 80040ae:	e707      	b.n	8003ec0 <__ieee754_rem_pio2+0x1e8>
 80040b0:	41700000 	.word	0x41700000
 80040b4:	08004dac 	.word	0x08004dac

080040b8 <__kernel_rem_pio2>:
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80040c0:	9308      	str	r3, [sp, #32]
 80040c2:	9101      	str	r1, [sp, #4]
 80040c4:	4bc0      	ldr	r3, [pc, #768]	; (80043c8 <__kernel_rem_pio2+0x310>)
 80040c6:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80040c8:	f112 0f14 	cmn.w	r2, #20
 80040cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040d0:	bfa8      	it	ge
 80040d2:	1ed4      	subge	r4, r2, #3
 80040d4:	9304      	str	r3, [sp, #16]
 80040d6:	9b08      	ldr	r3, [sp, #32]
 80040d8:	bfb8      	it	lt
 80040da:	2400      	movlt	r4, #0
 80040dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80040e0:	9306      	str	r3, [sp, #24]
 80040e2:	bfa4      	itt	ge
 80040e4:	2318      	movge	r3, #24
 80040e6:	fb94 f4f3 	sdivge	r4, r4, r3
 80040ea:	f06f 0317 	mvn.w	r3, #23
 80040ee:	fb04 3303 	mla	r3, r4, r3, r3
 80040f2:	eb03 0a02 	add.w	sl, r3, r2
 80040f6:	9a06      	ldr	r2, [sp, #24]
 80040f8:	9b04      	ldr	r3, [sp, #16]
 80040fa:	1aa7      	subs	r7, r4, r2
 80040fc:	eb03 0802 	add.w	r8, r3, r2
 8004100:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004102:	2500      	movs	r5, #0
 8004104:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004108:	2200      	movs	r2, #0
 800410a:	2300      	movs	r3, #0
 800410c:	9009      	str	r0, [sp, #36]	; 0x24
 800410e:	ae20      	add	r6, sp, #128	; 0x80
 8004110:	4545      	cmp	r5, r8
 8004112:	dd19      	ble.n	8004148 <__kernel_rem_pio2+0x90>
 8004114:	9b08      	ldr	r3, [sp, #32]
 8004116:	aa20      	add	r2, sp, #128	; 0x80
 8004118:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800411c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004120:	f1c3 0301 	rsb	r3, r3, #1
 8004124:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004128:	9307      	str	r3, [sp, #28]
 800412a:	9b07      	ldr	r3, [sp, #28]
 800412c:	9a04      	ldr	r2, [sp, #16]
 800412e:	4443      	add	r3, r8
 8004130:	429a      	cmp	r2, r3
 8004132:	db35      	blt.n	80041a0 <__kernel_rem_pio2+0xe8>
 8004134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004136:	2200      	movs	r2, #0
 8004138:	f1a3 0908 	sub.w	r9, r3, #8
 800413c:	2300      	movs	r3, #0
 800413e:	462f      	mov	r7, r5
 8004140:	2600      	movs	r6, #0
 8004142:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004146:	e01f      	b.n	8004188 <__kernel_rem_pio2+0xd0>
 8004148:	42ef      	cmn	r7, r5
 800414a:	d40b      	bmi.n	8004164 <__kernel_rem_pio2+0xac>
 800414c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004150:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004154:	f7fc f94e 	bl	80003f4 <__aeabi_i2d>
 8004158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800415c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004160:	3501      	adds	r5, #1
 8004162:	e7d5      	b.n	8004110 <__kernel_rem_pio2+0x58>
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	e7f8      	b.n	800415c <__kernel_rem_pio2+0xa4>
 800416a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800416e:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004172:	f7fc f9a9 	bl	80004c8 <__aeabi_dmul>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800417e:	f7fb ffed 	bl	800015c <__adddf3>
 8004182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004186:	3601      	adds	r6, #1
 8004188:	9b06      	ldr	r3, [sp, #24]
 800418a:	3f08      	subs	r7, #8
 800418c:	429e      	cmp	r6, r3
 800418e:	ddec      	ble.n	800416a <__kernel_rem_pio2+0xb2>
 8004190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004194:	3508      	adds	r5, #8
 8004196:	e8eb 2302 	strd	r2, r3, [fp], #8
 800419a:	f108 0801 	add.w	r8, r8, #1
 800419e:	e7c4      	b.n	800412a <__kernel_rem_pio2+0x72>
 80041a0:	9b04      	ldr	r3, [sp, #16]
 80041a2:	aa0c      	add	r2, sp, #48	; 0x30
 80041a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80041a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80041aa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80041ac:	9f04      	ldr	r7, [sp, #16]
 80041ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80041b2:	930a      	str	r3, [sp, #40]	; 0x28
 80041b4:	463e      	mov	r6, r7
 80041b6:	ab98      	add	r3, sp, #608	; 0x260
 80041b8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80041bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041c0:	f8cd b008 	str.w	fp, [sp, #8]
 80041c4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80041c8:	2e00      	cmp	r6, #0
 80041ca:	dc71      	bgt.n	80042b0 <__kernel_rem_pio2+0x1f8>
 80041cc:	4652      	mov	r2, sl
 80041ce:	4620      	mov	r0, r4
 80041d0:	4629      	mov	r1, r5
 80041d2:	f000 fd01 	bl	8004bd8 <scalbn>
 80041d6:	2200      	movs	r2, #0
 80041d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80041dc:	4604      	mov	r4, r0
 80041de:	460d      	mov	r5, r1
 80041e0:	f7fc f972 	bl	80004c8 <__aeabi_dmul>
 80041e4:	f000 fc78 	bl	8004ad8 <floor>
 80041e8:	2200      	movs	r2, #0
 80041ea:	4b78      	ldr	r3, [pc, #480]	; (80043cc <__kernel_rem_pio2+0x314>)
 80041ec:	f7fc f96c 	bl	80004c8 <__aeabi_dmul>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4620      	mov	r0, r4
 80041f6:	4629      	mov	r1, r5
 80041f8:	f7fb ffae 	bl	8000158 <__aeabi_dsub>
 80041fc:	460d      	mov	r5, r1
 80041fe:	4604      	mov	r4, r0
 8004200:	f7fc fbfc 	bl	80009fc <__aeabi_d2iz>
 8004204:	9007      	str	r0, [sp, #28]
 8004206:	f7fc f8f5 	bl	80003f4 <__aeabi_i2d>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4620      	mov	r0, r4
 8004210:	4629      	mov	r1, r5
 8004212:	f7fb ffa1 	bl	8000158 <__aeabi_dsub>
 8004216:	f1ba 0f00 	cmp.w	sl, #0
 800421a:	4680      	mov	r8, r0
 800421c:	4689      	mov	r9, r1
 800421e:	dd70      	ble.n	8004302 <__kernel_rem_pio2+0x24a>
 8004220:	1e7a      	subs	r2, r7, #1
 8004222:	ab0c      	add	r3, sp, #48	; 0x30
 8004224:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004228:	9c07      	ldr	r4, [sp, #28]
 800422a:	f1ca 0118 	rsb	r1, sl, #24
 800422e:	fa40 f301 	asr.w	r3, r0, r1
 8004232:	441c      	add	r4, r3
 8004234:	408b      	lsls	r3, r1
 8004236:	1ac0      	subs	r0, r0, r3
 8004238:	ab0c      	add	r3, sp, #48	; 0x30
 800423a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800423e:	f1ca 0317 	rsb	r3, sl, #23
 8004242:	9407      	str	r4, [sp, #28]
 8004244:	fa40 f303 	asr.w	r3, r0, r3
 8004248:	9302      	str	r3, [sp, #8]
 800424a:	9b02      	ldr	r3, [sp, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	dd66      	ble.n	800431e <__kernel_rem_pio2+0x266>
 8004250:	2200      	movs	r2, #0
 8004252:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004256:	4614      	mov	r4, r2
 8004258:	9b07      	ldr	r3, [sp, #28]
 800425a:	3301      	adds	r3, #1
 800425c:	9307      	str	r3, [sp, #28]
 800425e:	4297      	cmp	r7, r2
 8004260:	f300 809f 	bgt.w	80043a2 <__kernel_rem_pio2+0x2ea>
 8004264:	f1ba 0f00 	cmp.w	sl, #0
 8004268:	dd07      	ble.n	800427a <__kernel_rem_pio2+0x1c2>
 800426a:	f1ba 0f01 	cmp.w	sl, #1
 800426e:	f000 80b9 	beq.w	80043e4 <__kernel_rem_pio2+0x32c>
 8004272:	f1ba 0f02 	cmp.w	sl, #2
 8004276:	f000 80bf 	beq.w	80043f8 <__kernel_rem_pio2+0x340>
 800427a:	9b02      	ldr	r3, [sp, #8]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d14e      	bne.n	800431e <__kernel_rem_pio2+0x266>
 8004280:	4642      	mov	r2, r8
 8004282:	464b      	mov	r3, r9
 8004284:	2000      	movs	r0, #0
 8004286:	4952      	ldr	r1, [pc, #328]	; (80043d0 <__kernel_rem_pio2+0x318>)
 8004288:	f7fb ff66 	bl	8000158 <__aeabi_dsub>
 800428c:	4680      	mov	r8, r0
 800428e:	4689      	mov	r9, r1
 8004290:	2c00      	cmp	r4, #0
 8004292:	d044      	beq.n	800431e <__kernel_rem_pio2+0x266>
 8004294:	4652      	mov	r2, sl
 8004296:	2000      	movs	r0, #0
 8004298:	494d      	ldr	r1, [pc, #308]	; (80043d0 <__kernel_rem_pio2+0x318>)
 800429a:	f000 fc9d 	bl	8004bd8 <scalbn>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4640      	mov	r0, r8
 80042a4:	4649      	mov	r1, r9
 80042a6:	f7fb ff57 	bl	8000158 <__aeabi_dsub>
 80042aa:	4680      	mov	r8, r0
 80042ac:	4689      	mov	r9, r1
 80042ae:	e036      	b.n	800431e <__kernel_rem_pio2+0x266>
 80042b0:	2200      	movs	r2, #0
 80042b2:	4b48      	ldr	r3, [pc, #288]	; (80043d4 <__kernel_rem_pio2+0x31c>)
 80042b4:	4620      	mov	r0, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	f7fc f906 	bl	80004c8 <__aeabi_dmul>
 80042bc:	f7fc fb9e 	bl	80009fc <__aeabi_d2iz>
 80042c0:	f7fc f898 	bl	80003f4 <__aeabi_i2d>
 80042c4:	2200      	movs	r2, #0
 80042c6:	4b44      	ldr	r3, [pc, #272]	; (80043d8 <__kernel_rem_pio2+0x320>)
 80042c8:	4680      	mov	r8, r0
 80042ca:	4689      	mov	r9, r1
 80042cc:	f7fc f8fc 	bl	80004c8 <__aeabi_dmul>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4620      	mov	r0, r4
 80042d6:	4629      	mov	r1, r5
 80042d8:	f7fb ff3e 	bl	8000158 <__aeabi_dsub>
 80042dc:	f7fc fb8e 	bl	80009fc <__aeabi_d2iz>
 80042e0:	9b02      	ldr	r3, [sp, #8]
 80042e2:	3e01      	subs	r6, #1
 80042e4:	f843 0b04 	str.w	r0, [r3], #4
 80042e8:	9302      	str	r3, [sp, #8]
 80042ea:	ab70      	add	r3, sp, #448	; 0x1c0
 80042ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80042f0:	4640      	mov	r0, r8
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	4649      	mov	r1, r9
 80042f8:	f7fb ff30 	bl	800015c <__adddf3>
 80042fc:	4604      	mov	r4, r0
 80042fe:	460d      	mov	r5, r1
 8004300:	e762      	b.n	80041c8 <__kernel_rem_pio2+0x110>
 8004302:	d105      	bne.n	8004310 <__kernel_rem_pio2+0x258>
 8004304:	1e7b      	subs	r3, r7, #1
 8004306:	aa0c      	add	r2, sp, #48	; 0x30
 8004308:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800430c:	15c3      	asrs	r3, r0, #23
 800430e:	e79b      	b.n	8004248 <__kernel_rem_pio2+0x190>
 8004310:	2200      	movs	r2, #0
 8004312:	4b32      	ldr	r3, [pc, #200]	; (80043dc <__kernel_rem_pio2+0x324>)
 8004314:	f7fc fb5e 	bl	80009d4 <__aeabi_dcmpge>
 8004318:	2800      	cmp	r0, #0
 800431a:	d13f      	bne.n	800439c <__kernel_rem_pio2+0x2e4>
 800431c:	9002      	str	r0, [sp, #8]
 800431e:	2200      	movs	r2, #0
 8004320:	2300      	movs	r3, #0
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f7fc fb37 	bl	8000998 <__aeabi_dcmpeq>
 800432a:	2800      	cmp	r0, #0
 800432c:	f000 80b5 	beq.w	800449a <__kernel_rem_pio2+0x3e2>
 8004330:	1e7c      	subs	r4, r7, #1
 8004332:	4623      	mov	r3, r4
 8004334:	2200      	movs	r2, #0
 8004336:	9904      	ldr	r1, [sp, #16]
 8004338:	428b      	cmp	r3, r1
 800433a:	da64      	bge.n	8004406 <__kernel_rem_pio2+0x34e>
 800433c:	2a00      	cmp	r2, #0
 800433e:	d078      	beq.n	8004432 <__kernel_rem_pio2+0x37a>
 8004340:	ab0c      	add	r3, sp, #48	; 0x30
 8004342:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004346:	f1aa 0a18 	sub.w	sl, sl, #24
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a3 	beq.w	8004496 <__kernel_rem_pio2+0x3de>
 8004350:	4652      	mov	r2, sl
 8004352:	2000      	movs	r0, #0
 8004354:	491e      	ldr	r1, [pc, #120]	; (80043d0 <__kernel_rem_pio2+0x318>)
 8004356:	f000 fc3f 	bl	8004bd8 <scalbn>
 800435a:	46a2      	mov	sl, r4
 800435c:	4606      	mov	r6, r0
 800435e:	460f      	mov	r7, r1
 8004360:	f04f 0800 	mov.w	r8, #0
 8004364:	00e3      	lsls	r3, r4, #3
 8004366:	9306      	str	r3, [sp, #24]
 8004368:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80043d4 <__kernel_rem_pio2+0x31c>
 800436c:	ab70      	add	r3, sp, #448	; 0x1c0
 800436e:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004372:	f1ba 0f00 	cmp.w	sl, #0
 8004376:	f280 80c6 	bge.w	8004506 <__kernel_rem_pio2+0x44e>
 800437a:	4627      	mov	r7, r4
 800437c:	f04f 0800 	mov.w	r8, #0
 8004380:	2f00      	cmp	r7, #0
 8004382:	f2c0 80f3 	blt.w	800456c <__kernel_rem_pio2+0x4b4>
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <__kernel_rem_pio2+0x328>)
 8004388:	f04f 0a00 	mov.w	sl, #0
 800438c:	461d      	mov	r5, r3
 800438e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004390:	f04f 0b00 	mov.w	fp, #0
 8004394:	2600      	movs	r6, #0
 8004396:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800439a:	e0d9      	b.n	8004550 <__kernel_rem_pio2+0x498>
 800439c:	2302      	movs	r3, #2
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	e756      	b.n	8004250 <__kernel_rem_pio2+0x198>
 80043a2:	f8db 3000 	ldr.w	r3, [fp]
 80043a6:	b954      	cbnz	r4, 80043be <__kernel_rem_pio2+0x306>
 80043a8:	b123      	cbz	r3, 80043b4 <__kernel_rem_pio2+0x2fc>
 80043aa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80043ae:	f8cb 3000 	str.w	r3, [fp]
 80043b2:	2301      	movs	r3, #1
 80043b4:	461c      	mov	r4, r3
 80043b6:	3201      	adds	r2, #1
 80043b8:	f10b 0b04 	add.w	fp, fp, #4
 80043bc:	e74f      	b.n	800425e <__kernel_rem_pio2+0x1a6>
 80043be:	1acb      	subs	r3, r1, r3
 80043c0:	f8cb 3000 	str.w	r3, [fp]
 80043c4:	4623      	mov	r3, r4
 80043c6:	e7f5      	b.n	80043b4 <__kernel_rem_pio2+0x2fc>
 80043c8:	08004ef8 	.word	0x08004ef8
 80043cc:	40200000 	.word	0x40200000
 80043d0:	3ff00000 	.word	0x3ff00000
 80043d4:	3e700000 	.word	0x3e700000
 80043d8:	41700000 	.word	0x41700000
 80043dc:	3fe00000 	.word	0x3fe00000
 80043e0:	08004eb8 	.word	0x08004eb8
 80043e4:	1e7a      	subs	r2, r7, #1
 80043e6:	ab0c      	add	r3, sp, #48	; 0x30
 80043e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80043f0:	a90c      	add	r1, sp, #48	; 0x30
 80043f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80043f6:	e740      	b.n	800427a <__kernel_rem_pio2+0x1c2>
 80043f8:	1e7a      	subs	r2, r7, #1
 80043fa:	ab0c      	add	r3, sp, #48	; 0x30
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004404:	e7f4      	b.n	80043f0 <__kernel_rem_pio2+0x338>
 8004406:	a90c      	add	r1, sp, #48	; 0x30
 8004408:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800440c:	3b01      	subs	r3, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	e791      	b.n	8004336 <__kernel_rem_pio2+0x27e>
 8004412:	3401      	adds	r4, #1
 8004414:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004418:	2a00      	cmp	r2, #0
 800441a:	d0fa      	beq.n	8004412 <__kernel_rem_pio2+0x35a>
 800441c:	9b08      	ldr	r3, [sp, #32]
 800441e:	1c7e      	adds	r6, r7, #1
 8004420:	18fd      	adds	r5, r7, r3
 8004422:	ab20      	add	r3, sp, #128	; 0x80
 8004424:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004428:	443c      	add	r4, r7
 800442a:	42b4      	cmp	r4, r6
 800442c:	da04      	bge.n	8004438 <__kernel_rem_pio2+0x380>
 800442e:	4627      	mov	r7, r4
 8004430:	e6c0      	b.n	80041b4 <__kernel_rem_pio2+0xfc>
 8004432:	2401      	movs	r4, #1
 8004434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004436:	e7ed      	b.n	8004414 <__kernel_rem_pio2+0x35c>
 8004438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800443a:	462f      	mov	r7, r5
 800443c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004440:	f7fb ffd8 	bl	80003f4 <__aeabi_i2d>
 8004444:	f04f 0b00 	mov.w	fp, #0
 8004448:	f04f 0800 	mov.w	r8, #0
 800444c:	f04f 0900 	mov.w	r9, #0
 8004450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004452:	e8e7 0102 	strd	r0, r1, [r7], #8
 8004456:	3b08      	subs	r3, #8
 8004458:	9302      	str	r3, [sp, #8]
 800445a:	9b06      	ldr	r3, [sp, #24]
 800445c:	459b      	cmp	fp, r3
 800445e:	dd07      	ble.n	8004470 <__kernel_rem_pio2+0x3b8>
 8004460:	ab70      	add	r3, sp, #448	; 0x1c0
 8004462:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004466:	463d      	mov	r5, r7
 8004468:	e9c3 8900 	strd	r8, r9, [r3]
 800446c:	3601      	adds	r6, #1
 800446e:	e7dc      	b.n	800442a <__kernel_rem_pio2+0x372>
 8004470:	9902      	ldr	r1, [sp, #8]
 8004472:	f10b 0b01 	add.w	fp, fp, #1
 8004476:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800447a:	9102      	str	r1, [sp, #8]
 800447c:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8004480:	f7fc f822 	bl	80004c8 <__aeabi_dmul>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4640      	mov	r0, r8
 800448a:	4649      	mov	r1, r9
 800448c:	f7fb fe66 	bl	800015c <__adddf3>
 8004490:	4680      	mov	r8, r0
 8004492:	4689      	mov	r9, r1
 8004494:	e7e1      	b.n	800445a <__kernel_rem_pio2+0x3a2>
 8004496:	3c01      	subs	r4, #1
 8004498:	e752      	b.n	8004340 <__kernel_rem_pio2+0x288>
 800449a:	f1ca 0200 	rsb	r2, sl, #0
 800449e:	4640      	mov	r0, r8
 80044a0:	4649      	mov	r1, r9
 80044a2:	f000 fb99 	bl	8004bd8 <scalbn>
 80044a6:	2200      	movs	r2, #0
 80044a8:	4ba5      	ldr	r3, [pc, #660]	; (8004740 <__kernel_rem_pio2+0x688>)
 80044aa:	4604      	mov	r4, r0
 80044ac:	460d      	mov	r5, r1
 80044ae:	f7fc fa91 	bl	80009d4 <__aeabi_dcmpge>
 80044b2:	b1f8      	cbz	r0, 80044f4 <__kernel_rem_pio2+0x43c>
 80044b4:	2200      	movs	r2, #0
 80044b6:	4ba3      	ldr	r3, [pc, #652]	; (8004744 <__kernel_rem_pio2+0x68c>)
 80044b8:	4620      	mov	r0, r4
 80044ba:	4629      	mov	r1, r5
 80044bc:	f7fc f804 	bl	80004c8 <__aeabi_dmul>
 80044c0:	f7fc fa9c 	bl	80009fc <__aeabi_d2iz>
 80044c4:	4606      	mov	r6, r0
 80044c6:	f7fb ff95 	bl	80003f4 <__aeabi_i2d>
 80044ca:	2200      	movs	r2, #0
 80044cc:	4b9c      	ldr	r3, [pc, #624]	; (8004740 <__kernel_rem_pio2+0x688>)
 80044ce:	f7fb fffb 	bl	80004c8 <__aeabi_dmul>
 80044d2:	460b      	mov	r3, r1
 80044d4:	4602      	mov	r2, r0
 80044d6:	4629      	mov	r1, r5
 80044d8:	4620      	mov	r0, r4
 80044da:	f7fb fe3d 	bl	8000158 <__aeabi_dsub>
 80044de:	f7fc fa8d 	bl	80009fc <__aeabi_d2iz>
 80044e2:	1c7c      	adds	r4, r7, #1
 80044e4:	ab0c      	add	r3, sp, #48	; 0x30
 80044e6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80044ea:	f10a 0a18 	add.w	sl, sl, #24
 80044ee:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80044f2:	e72d      	b.n	8004350 <__kernel_rem_pio2+0x298>
 80044f4:	4620      	mov	r0, r4
 80044f6:	4629      	mov	r1, r5
 80044f8:	f7fc fa80 	bl	80009fc <__aeabi_d2iz>
 80044fc:	ab0c      	add	r3, sp, #48	; 0x30
 80044fe:	463c      	mov	r4, r7
 8004500:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004504:	e724      	b.n	8004350 <__kernel_rem_pio2+0x298>
 8004506:	ab0c      	add	r3, sp, #48	; 0x30
 8004508:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800450c:	f7fb ff72 	bl	80003f4 <__aeabi_i2d>
 8004510:	4632      	mov	r2, r6
 8004512:	463b      	mov	r3, r7
 8004514:	f7fb ffd8 	bl	80004c8 <__aeabi_dmul>
 8004518:	4642      	mov	r2, r8
 800451a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800451e:	464b      	mov	r3, r9
 8004520:	4630      	mov	r0, r6
 8004522:	4639      	mov	r1, r7
 8004524:	f7fb ffd0 	bl	80004c8 <__aeabi_dmul>
 8004528:	f10a 3aff 	add.w	sl, sl, #4294967295
 800452c:	4606      	mov	r6, r0
 800452e:	460f      	mov	r7, r1
 8004530:	e71f      	b.n	8004372 <__kernel_rem_pio2+0x2ba>
 8004532:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004536:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800453a:	f7fb ffc5 	bl	80004c8 <__aeabi_dmul>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4650      	mov	r0, sl
 8004544:	4659      	mov	r1, fp
 8004546:	f7fb fe09 	bl	800015c <__adddf3>
 800454a:	4682      	mov	sl, r0
 800454c:	468b      	mov	fp, r1
 800454e:	3601      	adds	r6, #1
 8004550:	9b04      	ldr	r3, [sp, #16]
 8004552:	429e      	cmp	r6, r3
 8004554:	dc01      	bgt.n	800455a <__kernel_rem_pio2+0x4a2>
 8004556:	45b0      	cmp	r8, r6
 8004558:	daeb      	bge.n	8004532 <__kernel_rem_pio2+0x47a>
 800455a:	ab48      	add	r3, sp, #288	; 0x120
 800455c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004560:	e9c3 ab00 	strd	sl, fp, [r3]
 8004564:	3f01      	subs	r7, #1
 8004566:	f108 0801 	add.w	r8, r8, #1
 800456a:	e709      	b.n	8004380 <__kernel_rem_pio2+0x2c8>
 800456c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800456e:	2b02      	cmp	r3, #2
 8004570:	dc09      	bgt.n	8004586 <__kernel_rem_pio2+0x4ce>
 8004572:	2b00      	cmp	r3, #0
 8004574:	dc34      	bgt.n	80045e0 <__kernel_rem_pio2+0x528>
 8004576:	d05e      	beq.n	8004636 <__kernel_rem_pio2+0x57e>
 8004578:	9b07      	ldr	r3, [sp, #28]
 800457a:	f003 0007 	and.w	r0, r3, #7
 800457e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004586:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004588:	2b03      	cmp	r3, #3
 800458a:	d1f5      	bne.n	8004578 <__kernel_rem_pio2+0x4c0>
 800458c:	9a06      	ldr	r2, [sp, #24]
 800458e:	ab48      	add	r3, sp, #288	; 0x120
 8004590:	441a      	add	r2, r3
 8004592:	4615      	mov	r5, r2
 8004594:	4692      	mov	sl, r2
 8004596:	46a3      	mov	fp, r4
 8004598:	f1bb 0f00 	cmp.w	fp, #0
 800459c:	dc7a      	bgt.n	8004694 <__kernel_rem_pio2+0x5dc>
 800459e:	46aa      	mov	sl, r5
 80045a0:	46a3      	mov	fp, r4
 80045a2:	f1bb 0f01 	cmp.w	fp, #1
 80045a6:	f300 8094 	bgt.w	80046d2 <__kernel_rem_pio2+0x61a>
 80045aa:	2700      	movs	r7, #0
 80045ac:	463e      	mov	r6, r7
 80045ae:	2c01      	cmp	r4, #1
 80045b0:	f300 80ae 	bgt.w	8004710 <__kernel_rem_pio2+0x658>
 80045b4:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80045b8:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80045bc:	9b02      	ldr	r3, [sp, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f040 80b0 	bne.w	8004724 <__kernel_rem_pio2+0x66c>
 80045c4:	4603      	mov	r3, r0
 80045c6:	462a      	mov	r2, r5
 80045c8:	9801      	ldr	r0, [sp, #4]
 80045ca:	e9c0 2300 	strd	r2, r3, [r0]
 80045ce:	4622      	mov	r2, r4
 80045d0:	460b      	mov	r3, r1
 80045d2:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80045d6:	463a      	mov	r2, r7
 80045d8:	4633      	mov	r3, r6
 80045da:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80045de:	e7cb      	b.n	8004578 <__kernel_rem_pio2+0x4c0>
 80045e0:	2000      	movs	r0, #0
 80045e2:	9a06      	ldr	r2, [sp, #24]
 80045e4:	ab48      	add	r3, sp, #288	; 0x120
 80045e6:	441a      	add	r2, r3
 80045e8:	4615      	mov	r5, r2
 80045ea:	46a0      	mov	r8, r4
 80045ec:	4601      	mov	r1, r0
 80045ee:	f1b8 0f00 	cmp.w	r8, #0
 80045f2:	da3c      	bge.n	800466e <__kernel_rem_pio2+0x5b6>
 80045f4:	9b02      	ldr	r3, [sp, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d040      	beq.n	800467c <__kernel_rem_pio2+0x5c4>
 80045fa:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80045fe:	4602      	mov	r2, r0
 8004600:	462b      	mov	r3, r5
 8004602:	9d01      	ldr	r5, [sp, #4]
 8004604:	2601      	movs	r6, #1
 8004606:	e9c5 2300 	strd	r2, r3, [r5]
 800460a:	460b      	mov	r3, r1
 800460c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004610:	f7fb fda2 	bl	8000158 <__aeabi_dsub>
 8004614:	4684      	mov	ip, r0
 8004616:	460f      	mov	r7, r1
 8004618:	ad48      	add	r5, sp, #288	; 0x120
 800461a:	42b4      	cmp	r4, r6
 800461c:	f105 0508 	add.w	r5, r5, #8
 8004620:	da2e      	bge.n	8004680 <__kernel_rem_pio2+0x5c8>
 8004622:	9b02      	ldr	r3, [sp, #8]
 8004624:	b10b      	cbz	r3, 800462a <__kernel_rem_pio2+0x572>
 8004626:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800462a:	4662      	mov	r2, ip
 800462c:	463b      	mov	r3, r7
 800462e:	9901      	ldr	r1, [sp, #4]
 8004630:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004634:	e7a0      	b.n	8004578 <__kernel_rem_pio2+0x4c0>
 8004636:	9a06      	ldr	r2, [sp, #24]
 8004638:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800463a:	ab48      	add	r3, sp, #288	; 0x120
 800463c:	441a      	add	r2, r3
 800463e:	4615      	mov	r5, r2
 8004640:	4637      	mov	r7, r6
 8004642:	2c00      	cmp	r4, #0
 8004644:	da09      	bge.n	800465a <__kernel_rem_pio2+0x5a2>
 8004646:	9b02      	ldr	r3, [sp, #8]
 8004648:	b10b      	cbz	r3, 800464e <__kernel_rem_pio2+0x596>
 800464a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800464e:	4632      	mov	r2, r6
 8004650:	463b      	mov	r3, r7
 8004652:	9901      	ldr	r1, [sp, #4]
 8004654:	e9c1 2300 	strd	r2, r3, [r1]
 8004658:	e78e      	b.n	8004578 <__kernel_rem_pio2+0x4c0>
 800465a:	4630      	mov	r0, r6
 800465c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004660:	4639      	mov	r1, r7
 8004662:	f7fb fd7b 	bl	800015c <__adddf3>
 8004666:	3c01      	subs	r4, #1
 8004668:	4606      	mov	r6, r0
 800466a:	460f      	mov	r7, r1
 800466c:	e7e9      	b.n	8004642 <__kernel_rem_pio2+0x58a>
 800466e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004672:	f7fb fd73 	bl	800015c <__adddf3>
 8004676:	f108 38ff 	add.w	r8, r8, #4294967295
 800467a:	e7b8      	b.n	80045ee <__kernel_rem_pio2+0x536>
 800467c:	460d      	mov	r5, r1
 800467e:	e7be      	b.n	80045fe <__kernel_rem_pio2+0x546>
 8004680:	4660      	mov	r0, ip
 8004682:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004686:	4639      	mov	r1, r7
 8004688:	f7fb fd68 	bl	800015c <__adddf3>
 800468c:	3601      	adds	r6, #1
 800468e:	4684      	mov	ip, r0
 8004690:	460f      	mov	r7, r1
 8004692:	e7c2      	b.n	800461a <__kernel_rem_pio2+0x562>
 8004694:	e9da 6700 	ldrd	r6, r7, [sl]
 8004698:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800469c:	4632      	mov	r2, r6
 800469e:	463b      	mov	r3, r7
 80046a0:	4640      	mov	r0, r8
 80046a2:	4649      	mov	r1, r9
 80046a4:	f7fb fd5a 	bl	800015c <__adddf3>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046b0:	4640      	mov	r0, r8
 80046b2:	4649      	mov	r1, r9
 80046b4:	f7fb fd50 	bl	8000158 <__aeabi_dsub>
 80046b8:	4632      	mov	r2, r6
 80046ba:	463b      	mov	r3, r7
 80046bc:	f7fb fd4e 	bl	800015c <__adddf3>
 80046c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046c4:	e86a 0102 	strd	r0, r1, [sl], #-8
 80046c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046cc:	e9ca 2300 	strd	r2, r3, [sl]
 80046d0:	e762      	b.n	8004598 <__kernel_rem_pio2+0x4e0>
 80046d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80046d6:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80046da:	4642      	mov	r2, r8
 80046dc:	464b      	mov	r3, r9
 80046de:	4630      	mov	r0, r6
 80046e0:	4639      	mov	r1, r7
 80046e2:	f7fb fd3b 	bl	800015c <__adddf3>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046ee:	4630      	mov	r0, r6
 80046f0:	4639      	mov	r1, r7
 80046f2:	f7fb fd31 	bl	8000158 <__aeabi_dsub>
 80046f6:	4642      	mov	r2, r8
 80046f8:	464b      	mov	r3, r9
 80046fa:	f7fb fd2f 	bl	800015c <__adddf3>
 80046fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004702:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004706:	f10b 3bff 	add.w	fp, fp, #4294967295
 800470a:	e9ca 2300 	strd	r2, r3, [sl]
 800470e:	e748      	b.n	80045a2 <__kernel_rem_pio2+0x4ea>
 8004710:	4638      	mov	r0, r7
 8004712:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004716:	4631      	mov	r1, r6
 8004718:	f7fb fd20 	bl	800015c <__adddf3>
 800471c:	3c01      	subs	r4, #1
 800471e:	4607      	mov	r7, r0
 8004720:	460e      	mov	r6, r1
 8004722:	e744      	b.n	80045ae <__kernel_rem_pio2+0x4f6>
 8004724:	9b01      	ldr	r3, [sp, #4]
 8004726:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800472a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800472e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004732:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004736:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800473a:	601d      	str	r5, [r3, #0]
 800473c:	615e      	str	r6, [r3, #20]
 800473e:	e71b      	b.n	8004578 <__kernel_rem_pio2+0x4c0>
 8004740:	41700000 	.word	0x41700000
 8004744:	3e700000 	.word	0x3e700000

08004748 <__kernel_tan>:
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474c:	461f      	mov	r7, r3
 800474e:	4bda      	ldr	r3, [pc, #872]	; (8004ab8 <__kernel_tan+0x370>)
 8004750:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004754:	b089      	sub	sp, #36	; 0x24
 8004756:	429e      	cmp	r6, r3
 8004758:	4604      	mov	r4, r0
 800475a:	460d      	mov	r5, r1
 800475c:	4682      	mov	sl, r0
 800475e:	468b      	mov	fp, r1
 8004760:	4690      	mov	r8, r2
 8004762:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8004766:	9105      	str	r1, [sp, #20]
 8004768:	dc21      	bgt.n	80047ae <__kernel_tan+0x66>
 800476a:	f7fc f947 	bl	80009fc <__aeabi_d2iz>
 800476e:	2800      	cmp	r0, #0
 8004770:	d140      	bne.n	80047f4 <__kernel_tan+0xac>
 8004772:	f109 0301 	add.w	r3, r9, #1
 8004776:	4323      	orrs	r3, r4
 8004778:	4333      	orrs	r3, r6
 800477a:	4622      	mov	r2, r4
 800477c:	d110      	bne.n	80047a0 <__kernel_tan+0x58>
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f000 f9a5 	bl	8004ad0 <fabs>
 8004786:	4602      	mov	r2, r0
 8004788:	2000      	movs	r0, #0
 800478a:	460b      	mov	r3, r1
 800478c:	49cb      	ldr	r1, [pc, #812]	; (8004abc <__kernel_tan+0x374>)
 800478e:	f7fb ffc5 	bl	800071c <__aeabi_ddiv>
 8004792:	4682      	mov	sl, r0
 8004794:	468b      	mov	fp, r1
 8004796:	4650      	mov	r0, sl
 8004798:	4659      	mov	r1, fp
 800479a:	b009      	add	sp, #36	; 0x24
 800479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a0:	f1b9 0f01 	cmp.w	r9, #1
 80047a4:	d0f7      	beq.n	8004796 <__kernel_tan+0x4e>
 80047a6:	462b      	mov	r3, r5
 80047a8:	2000      	movs	r0, #0
 80047aa:	49c5      	ldr	r1, [pc, #788]	; (8004ac0 <__kernel_tan+0x378>)
 80047ac:	e7ef      	b.n	800478e <__kernel_tan+0x46>
 80047ae:	4bc5      	ldr	r3, [pc, #788]	; (8004ac4 <__kernel_tan+0x37c>)
 80047b0:	429e      	cmp	r6, r3
 80047b2:	dd1f      	ble.n	80047f4 <__kernel_tan+0xac>
 80047b4:	2900      	cmp	r1, #0
 80047b6:	da04      	bge.n	80047c2 <__kernel_tan+0x7a>
 80047b8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80047bc:	469b      	mov	fp, r3
 80047be:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80047c2:	4652      	mov	r2, sl
 80047c4:	a19e      	add	r1, pc, #632	; (adr r1, 8004a40 <__kernel_tan+0x2f8>)
 80047c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047ca:	465b      	mov	r3, fp
 80047cc:	f7fb fcc4 	bl	8000158 <__aeabi_dsub>
 80047d0:	4604      	mov	r4, r0
 80047d2:	460d      	mov	r5, r1
 80047d4:	a19c      	add	r1, pc, #624	; (adr r1, 8004a48 <__kernel_tan+0x300>)
 80047d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047da:	4642      	mov	r2, r8
 80047dc:	463b      	mov	r3, r7
 80047de:	f7fb fcbb 	bl	8000158 <__aeabi_dsub>
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	f7fb fcb9 	bl	800015c <__adddf3>
 80047ea:	f04f 0800 	mov.w	r8, #0
 80047ee:	4682      	mov	sl, r0
 80047f0:	468b      	mov	fp, r1
 80047f2:	4647      	mov	r7, r8
 80047f4:	4652      	mov	r2, sl
 80047f6:	465b      	mov	r3, fp
 80047f8:	4650      	mov	r0, sl
 80047fa:	4659      	mov	r1, fp
 80047fc:	f7fb fe64 	bl	80004c8 <__aeabi_dmul>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	e9cd 2300 	strd	r2, r3, [sp]
 8004808:	f7fb fe5e 	bl	80004c8 <__aeabi_dmul>
 800480c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004810:	4604      	mov	r4, r0
 8004812:	460d      	mov	r5, r1
 8004814:	4650      	mov	r0, sl
 8004816:	4659      	mov	r1, fp
 8004818:	f7fb fe56 	bl	80004c8 <__aeabi_dmul>
 800481c:	a38c      	add	r3, pc, #560	; (adr r3, 8004a50 <__kernel_tan+0x308>)
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004826:	4620      	mov	r0, r4
 8004828:	4629      	mov	r1, r5
 800482a:	f7fb fe4d 	bl	80004c8 <__aeabi_dmul>
 800482e:	a38a      	add	r3, pc, #552	; (adr r3, 8004a58 <__kernel_tan+0x310>)
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f7fb fc92 	bl	800015c <__adddf3>
 8004838:	4622      	mov	r2, r4
 800483a:	462b      	mov	r3, r5
 800483c:	f7fb fe44 	bl	80004c8 <__aeabi_dmul>
 8004840:	a387      	add	r3, pc, #540	; (adr r3, 8004a60 <__kernel_tan+0x318>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f7fb fc89 	bl	800015c <__adddf3>
 800484a:	4622      	mov	r2, r4
 800484c:	462b      	mov	r3, r5
 800484e:	f7fb fe3b 	bl	80004c8 <__aeabi_dmul>
 8004852:	a385      	add	r3, pc, #532	; (adr r3, 8004a68 <__kernel_tan+0x320>)
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f7fb fc80 	bl	800015c <__adddf3>
 800485c:	4622      	mov	r2, r4
 800485e:	462b      	mov	r3, r5
 8004860:	f7fb fe32 	bl	80004c8 <__aeabi_dmul>
 8004864:	a382      	add	r3, pc, #520	; (adr r3, 8004a70 <__kernel_tan+0x328>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fb fc77 	bl	800015c <__adddf3>
 800486e:	4622      	mov	r2, r4
 8004870:	462b      	mov	r3, r5
 8004872:	f7fb fe29 	bl	80004c8 <__aeabi_dmul>
 8004876:	a380      	add	r3, pc, #512	; (adr r3, 8004a78 <__kernel_tan+0x330>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f7fb fc6e 	bl	800015c <__adddf3>
 8004880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004884:	f7fb fe20 	bl	80004c8 <__aeabi_dmul>
 8004888:	a37d      	add	r3, pc, #500	; (adr r3, 8004a80 <__kernel_tan+0x338>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004892:	4620      	mov	r0, r4
 8004894:	4629      	mov	r1, r5
 8004896:	f7fb fe17 	bl	80004c8 <__aeabi_dmul>
 800489a:	a37b      	add	r3, pc, #492	; (adr r3, 8004a88 <__kernel_tan+0x340>)
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f7fb fc5c 	bl	800015c <__adddf3>
 80048a4:	4622      	mov	r2, r4
 80048a6:	462b      	mov	r3, r5
 80048a8:	f7fb fe0e 	bl	80004c8 <__aeabi_dmul>
 80048ac:	a378      	add	r3, pc, #480	; (adr r3, 8004a90 <__kernel_tan+0x348>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	f7fb fc53 	bl	800015c <__adddf3>
 80048b6:	4622      	mov	r2, r4
 80048b8:	462b      	mov	r3, r5
 80048ba:	f7fb fe05 	bl	80004c8 <__aeabi_dmul>
 80048be:	a376      	add	r3, pc, #472	; (adr r3, 8004a98 <__kernel_tan+0x350>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb fc4a 	bl	800015c <__adddf3>
 80048c8:	4622      	mov	r2, r4
 80048ca:	462b      	mov	r3, r5
 80048cc:	f7fb fdfc 	bl	80004c8 <__aeabi_dmul>
 80048d0:	a373      	add	r3, pc, #460	; (adr r3, 8004aa0 <__kernel_tan+0x358>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f7fb fc41 	bl	800015c <__adddf3>
 80048da:	4622      	mov	r2, r4
 80048dc:	462b      	mov	r3, r5
 80048de:	f7fb fdf3 	bl	80004c8 <__aeabi_dmul>
 80048e2:	a371      	add	r3, pc, #452	; (adr r3, 8004aa8 <__kernel_tan+0x360>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fc38 	bl	800015c <__adddf3>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f4:	f7fb fc32 	bl	800015c <__adddf3>
 80048f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048fc:	f7fb fde4 	bl	80004c8 <__aeabi_dmul>
 8004900:	4642      	mov	r2, r8
 8004902:	463b      	mov	r3, r7
 8004904:	f7fb fc2a 	bl	800015c <__adddf3>
 8004908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800490c:	f7fb fddc 	bl	80004c8 <__aeabi_dmul>
 8004910:	4642      	mov	r2, r8
 8004912:	463b      	mov	r3, r7
 8004914:	f7fb fc22 	bl	800015c <__adddf3>
 8004918:	a365      	add	r3, pc, #404	; (adr r3, 8004ab0 <__kernel_tan+0x368>)
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	4604      	mov	r4, r0
 8004920:	460d      	mov	r5, r1
 8004922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004926:	f7fb fdcf 	bl	80004c8 <__aeabi_dmul>
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	f7fb fc15 	bl	800015c <__adddf3>
 8004932:	460b      	mov	r3, r1
 8004934:	e9cd 0100 	strd	r0, r1, [sp]
 8004938:	4602      	mov	r2, r0
 800493a:	4659      	mov	r1, fp
 800493c:	4650      	mov	r0, sl
 800493e:	f7fb fc0d 	bl	800015c <__adddf3>
 8004942:	4b60      	ldr	r3, [pc, #384]	; (8004ac4 <__kernel_tan+0x37c>)
 8004944:	4604      	mov	r4, r0
 8004946:	429e      	cmp	r6, r3
 8004948:	460d      	mov	r5, r1
 800494a:	dd3e      	ble.n	80049ca <__kernel_tan+0x282>
 800494c:	4648      	mov	r0, r9
 800494e:	f7fb fd51 	bl	80003f4 <__aeabi_i2d>
 8004952:	4622      	mov	r2, r4
 8004954:	4680      	mov	r8, r0
 8004956:	4689      	mov	r9, r1
 8004958:	462b      	mov	r3, r5
 800495a:	4620      	mov	r0, r4
 800495c:	4629      	mov	r1, r5
 800495e:	f7fb fdb3 	bl	80004c8 <__aeabi_dmul>
 8004962:	4642      	mov	r2, r8
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
 8004968:	464b      	mov	r3, r9
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f7fb fbf5 	bl	800015c <__adddf3>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4630      	mov	r0, r6
 8004978:	4639      	mov	r1, r7
 800497a:	f7fb fecf 	bl	800071c <__aeabi_ddiv>
 800497e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004982:	f7fb fbe9 	bl	8000158 <__aeabi_dsub>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4650      	mov	r0, sl
 800498c:	4659      	mov	r1, fp
 800498e:	f7fb fbe3 	bl	8000158 <__aeabi_dsub>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	f7fb fbe1 	bl	800015c <__adddf3>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4640      	mov	r0, r8
 80049a0:	4649      	mov	r1, r9
 80049a2:	f7fb fbd9 	bl	8000158 <__aeabi_dsub>
 80049a6:	9b05      	ldr	r3, [sp, #20]
 80049a8:	4604      	mov	r4, r0
 80049aa:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80049ae:	f00a 0a02 	and.w	sl, sl, #2
 80049b2:	f1ca 0001 	rsb	r0, sl, #1
 80049b6:	460d      	mov	r5, r1
 80049b8:	f7fb fd1c 	bl	80003f4 <__aeabi_i2d>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4620      	mov	r0, r4
 80049c2:	4629      	mov	r1, r5
 80049c4:	f7fb fd80 	bl	80004c8 <__aeabi_dmul>
 80049c8:	e6e3      	b.n	8004792 <__kernel_tan+0x4a>
 80049ca:	f1b9 0f01 	cmp.w	r9, #1
 80049ce:	d07b      	beq.n	8004ac8 <__kernel_tan+0x380>
 80049d0:	460f      	mov	r7, r1
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	2000      	movs	r0, #0
 80049d8:	4939      	ldr	r1, [pc, #228]	; (8004ac0 <__kernel_tan+0x378>)
 80049da:	f7fb fe9f 	bl	800071c <__aeabi_ddiv>
 80049de:	2600      	movs	r6, #0
 80049e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049e8:	4652      	mov	r2, sl
 80049ea:	465b      	mov	r3, fp
 80049ec:	4630      	mov	r0, r6
 80049ee:	4639      	mov	r1, r7
 80049f0:	f7fb fbb2 	bl	8000158 <__aeabi_dsub>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049fc:	f7fb fbac 	bl	8000158 <__aeabi_dsub>
 8004a00:	4632      	mov	r2, r6
 8004a02:	462b      	mov	r3, r5
 8004a04:	f7fb fd60 	bl	80004c8 <__aeabi_dmul>
 8004a08:	4632      	mov	r2, r6
 8004a0a:	4682      	mov	sl, r0
 8004a0c:	468b      	mov	fp, r1
 8004a0e:	462b      	mov	r3, r5
 8004a10:	4630      	mov	r0, r6
 8004a12:	4639      	mov	r1, r7
 8004a14:	f7fb fd58 	bl	80004c8 <__aeabi_dmul>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <__kernel_tan+0x374>)
 8004a1c:	f7fb fb9e 	bl	800015c <__adddf3>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4650      	mov	r0, sl
 8004a26:	4659      	mov	r1, fp
 8004a28:	f7fb fb98 	bl	800015c <__adddf3>
 8004a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a30:	f7fb fd4a 	bl	80004c8 <__aeabi_dmul>
 8004a34:	4632      	mov	r2, r6
 8004a36:	462b      	mov	r3, r5
 8004a38:	f7fb fb90 	bl	800015c <__adddf3>
 8004a3c:	e6a9      	b.n	8004792 <__kernel_tan+0x4a>
 8004a3e:	bf00      	nop
 8004a40:	54442d18 	.word	0x54442d18
 8004a44:	3fe921fb 	.word	0x3fe921fb
 8004a48:	33145c07 	.word	0x33145c07
 8004a4c:	3c81a626 	.word	0x3c81a626
 8004a50:	74bf7ad4 	.word	0x74bf7ad4
 8004a54:	3efb2a70 	.word	0x3efb2a70
 8004a58:	32f0a7e9 	.word	0x32f0a7e9
 8004a5c:	3f12b80f 	.word	0x3f12b80f
 8004a60:	1a8d1068 	.word	0x1a8d1068
 8004a64:	3f3026f7 	.word	0x3f3026f7
 8004a68:	fee08315 	.word	0xfee08315
 8004a6c:	3f57dbc8 	.word	0x3f57dbc8
 8004a70:	e96e8493 	.word	0xe96e8493
 8004a74:	3f8226e3 	.word	0x3f8226e3
 8004a78:	1bb341fe 	.word	0x1bb341fe
 8004a7c:	3faba1ba 	.word	0x3faba1ba
 8004a80:	db605373 	.word	0xdb605373
 8004a84:	bef375cb 	.word	0xbef375cb
 8004a88:	a03792a6 	.word	0xa03792a6
 8004a8c:	3f147e88 	.word	0x3f147e88
 8004a90:	f2f26501 	.word	0xf2f26501
 8004a94:	3f4344d8 	.word	0x3f4344d8
 8004a98:	c9560328 	.word	0xc9560328
 8004a9c:	3f6d6d22 	.word	0x3f6d6d22
 8004aa0:	8406d637 	.word	0x8406d637
 8004aa4:	3f9664f4 	.word	0x3f9664f4
 8004aa8:	1110fe7a 	.word	0x1110fe7a
 8004aac:	3fc11111 	.word	0x3fc11111
 8004ab0:	55555563 	.word	0x55555563
 8004ab4:	3fd55555 	.word	0x3fd55555
 8004ab8:	3e2fffff 	.word	0x3e2fffff
 8004abc:	3ff00000 	.word	0x3ff00000
 8004ac0:	bff00000 	.word	0xbff00000
 8004ac4:	3fe59427 	.word	0x3fe59427
 8004ac8:	4682      	mov	sl, r0
 8004aca:	468b      	mov	fp, r1
 8004acc:	e663      	b.n	8004796 <__kernel_tan+0x4e>
 8004ace:	bf00      	nop

08004ad0 <fabs>:
 8004ad0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004ad4:	4770      	bx	lr
	...

08004ad8 <floor>:
 8004ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004adc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004ae0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004ae4:	2e13      	cmp	r6, #19
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4607      	mov	r7, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	4605      	mov	r5, r0
 8004af0:	dc34      	bgt.n	8004b5c <floor+0x84>
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	da15      	bge.n	8004b22 <floor+0x4a>
 8004af6:	a334      	add	r3, pc, #208	; (adr r3, 8004bc8 <floor+0xf0>)
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fb2e 	bl	800015c <__adddf3>
 8004b00:	2200      	movs	r2, #0
 8004b02:	2300      	movs	r3, #0
 8004b04:	f7fb ff70 	bl	80009e8 <__aeabi_dcmpgt>
 8004b08:	b140      	cbz	r0, 8004b1c <floor+0x44>
 8004b0a:	2c00      	cmp	r4, #0
 8004b0c:	da59      	bge.n	8004bc2 <floor+0xea>
 8004b0e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004b12:	ea57 0503 	orrs.w	r5, r7, r3
 8004b16:	d001      	beq.n	8004b1c <floor+0x44>
 8004b18:	2500      	movs	r5, #0
 8004b1a:	4c2d      	ldr	r4, [pc, #180]	; (8004bd0 <floor+0xf8>)
 8004b1c:	4623      	mov	r3, r4
 8004b1e:	462f      	mov	r7, r5
 8004b20:	e025      	b.n	8004b6e <floor+0x96>
 8004b22:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <floor+0xfc>)
 8004b24:	fa42 f806 	asr.w	r8, r2, r6
 8004b28:	ea01 0208 	and.w	r2, r1, r8
 8004b2c:	4302      	orrs	r2, r0
 8004b2e:	d01e      	beq.n	8004b6e <floor+0x96>
 8004b30:	a325      	add	r3, pc, #148	; (adr r3, 8004bc8 <floor+0xf0>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fb11 	bl	800015c <__adddf3>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f7fb ff53 	bl	80009e8 <__aeabi_dcmpgt>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d0ea      	beq.n	8004b1c <floor+0x44>
 8004b46:	2c00      	cmp	r4, #0
 8004b48:	bfbe      	ittt	lt
 8004b4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004b4e:	fa43 f606 	asrlt.w	r6, r3, r6
 8004b52:	19a4      	addlt	r4, r4, r6
 8004b54:	2500      	movs	r5, #0
 8004b56:	ea24 0408 	bic.w	r4, r4, r8
 8004b5a:	e7df      	b.n	8004b1c <floor+0x44>
 8004b5c:	2e33      	cmp	r6, #51	; 0x33
 8004b5e:	dd0a      	ble.n	8004b76 <floor+0x9e>
 8004b60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004b64:	d103      	bne.n	8004b6e <floor+0x96>
 8004b66:	f7fb faf9 	bl	800015c <__adddf3>
 8004b6a:	4607      	mov	r7, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4638      	mov	r0, r7
 8004b70:	4619      	mov	r1, r3
 8004b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b76:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004b7e:	fa22 f808 	lsr.w	r8, r2, r8
 8004b82:	ea18 0f00 	tst.w	r8, r0
 8004b86:	d0f2      	beq.n	8004b6e <floor+0x96>
 8004b88:	a30f      	add	r3, pc, #60	; (adr r3, 8004bc8 <floor+0xf0>)
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f7fb fae5 	bl	800015c <__adddf3>
 8004b92:	2200      	movs	r2, #0
 8004b94:	2300      	movs	r3, #0
 8004b96:	f7fb ff27 	bl	80009e8 <__aeabi_dcmpgt>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d0be      	beq.n	8004b1c <floor+0x44>
 8004b9e:	2c00      	cmp	r4, #0
 8004ba0:	da02      	bge.n	8004ba8 <floor+0xd0>
 8004ba2:	2e14      	cmp	r6, #20
 8004ba4:	d103      	bne.n	8004bae <floor+0xd6>
 8004ba6:	3401      	adds	r4, #1
 8004ba8:	ea25 0508 	bic.w	r5, r5, r8
 8004bac:	e7b6      	b.n	8004b1c <floor+0x44>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004bb4:	fa03 f606 	lsl.w	r6, r3, r6
 8004bb8:	4435      	add	r5, r6
 8004bba:	42bd      	cmp	r5, r7
 8004bbc:	bf38      	it	cc
 8004bbe:	18e4      	addcc	r4, r4, r3
 8004bc0:	e7f2      	b.n	8004ba8 <floor+0xd0>
 8004bc2:	2500      	movs	r5, #0
 8004bc4:	462c      	mov	r4, r5
 8004bc6:	e7a9      	b.n	8004b1c <floor+0x44>
 8004bc8:	8800759c 	.word	0x8800759c
 8004bcc:	7e37e43c 	.word	0x7e37e43c
 8004bd0:	bff00000 	.word	0xbff00000
 8004bd4:	000fffff 	.word	0x000fffff

08004bd8 <scalbn>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004bde:	4604      	mov	r4, r0
 8004be0:	460d      	mov	r5, r1
 8004be2:	4617      	mov	r7, r2
 8004be4:	460b      	mov	r3, r1
 8004be6:	b996      	cbnz	r6, 8004c0e <scalbn+0x36>
 8004be8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004bec:	4303      	orrs	r3, r0
 8004bee:	d039      	beq.n	8004c64 <scalbn+0x8c>
 8004bf0:	4b35      	ldr	r3, [pc, #212]	; (8004cc8 <scalbn+0xf0>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f7fb fc68 	bl	80004c8 <__aeabi_dmul>
 8004bf8:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <scalbn+0xf4>)
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	429f      	cmp	r7, r3
 8004bfe:	460d      	mov	r5, r1
 8004c00:	da0f      	bge.n	8004c22 <scalbn+0x4a>
 8004c02:	a32d      	add	r3, pc, #180	; (adr r3, 8004cb8 <scalbn+0xe0>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fc5e 	bl	80004c8 <__aeabi_dmul>
 8004c0c:	e006      	b.n	8004c1c <scalbn+0x44>
 8004c0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c12:	4296      	cmp	r6, r2
 8004c14:	d10a      	bne.n	8004c2c <scalbn+0x54>
 8004c16:	4602      	mov	r2, r0
 8004c18:	f7fb faa0 	bl	800015c <__adddf3>
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	460d      	mov	r5, r1
 8004c20:	e020      	b.n	8004c64 <scalbn+0x8c>
 8004c22:	460b      	mov	r3, r1
 8004c24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004c28:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004c2c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004c30:	19b9      	adds	r1, r7, r6
 8004c32:	4291      	cmp	r1, r2
 8004c34:	dd0e      	ble.n	8004c54 <scalbn+0x7c>
 8004c36:	a322      	add	r3, pc, #136	; (adr r3, 8004cc0 <scalbn+0xe8>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004c40:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004c44:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004c48:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004c4c:	4820      	ldr	r0, [pc, #128]	; (8004cd0 <scalbn+0xf8>)
 8004c4e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004c52:	e7d9      	b.n	8004c08 <scalbn+0x30>
 8004c54:	2900      	cmp	r1, #0
 8004c56:	dd08      	ble.n	8004c6a <scalbn+0x92>
 8004c58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004c64:	4620      	mov	r0, r4
 8004c66:	4629      	mov	r1, r5
 8004c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c6a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004c6e:	da16      	bge.n	8004c9e <scalbn+0xc6>
 8004c70:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004c74:	429f      	cmp	r7, r3
 8004c76:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004c7a:	dd08      	ble.n	8004c8e <scalbn+0xb6>
 8004c7c:	4c15      	ldr	r4, [pc, #84]	; (8004cd4 <scalbn+0xfc>)
 8004c7e:	4814      	ldr	r0, [pc, #80]	; (8004cd0 <scalbn+0xf8>)
 8004c80:	f363 74df 	bfi	r4, r3, #31, #1
 8004c84:	a30e      	add	r3, pc, #56	; (adr r3, 8004cc0 <scalbn+0xe8>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	e7bc      	b.n	8004c08 <scalbn+0x30>
 8004c8e:	4c12      	ldr	r4, [pc, #72]	; (8004cd8 <scalbn+0x100>)
 8004c90:	4812      	ldr	r0, [pc, #72]	; (8004cdc <scalbn+0x104>)
 8004c92:	f363 74df 	bfi	r4, r3, #31, #1
 8004c96:	a308      	add	r3, pc, #32	; (adr r3, 8004cb8 <scalbn+0xe0>)
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	e7f5      	b.n	8004c8a <scalbn+0xb2>
 8004c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ca2:	3136      	adds	r1, #54	; 0x36
 8004ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ca8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004cac:	4620      	mov	r0, r4
 8004cae:	4629      	mov	r1, r5
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <scalbn+0x108>)
 8004cb4:	e7a8      	b.n	8004c08 <scalbn+0x30>
 8004cb6:	bf00      	nop
 8004cb8:	c2f8f359 	.word	0xc2f8f359
 8004cbc:	01a56e1f 	.word	0x01a56e1f
 8004cc0:	8800759c 	.word	0x8800759c
 8004cc4:	7e37e43c 	.word	0x7e37e43c
 8004cc8:	43500000 	.word	0x43500000
 8004ccc:	ffff3cb0 	.word	0xffff3cb0
 8004cd0:	8800759c 	.word	0x8800759c
 8004cd4:	7e37e43c 	.word	0x7e37e43c
 8004cd8:	01a56e1f 	.word	0x01a56e1f
 8004cdc:	c2f8f359 	.word	0xc2f8f359
 8004ce0:	3c900000 	.word	0x3c900000

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
